# SQLProbe

## Overview
SQLProbe is a command-line tool for penetration testers to detect and exploit SQL injection vulnerabilities in web applications, designed for Kali Linux. It automates testing for blind, error-based, and time-based SQL injections, extracts database information, and dumps table names and columns. This tool is a simplified alternative to `sqlmap`, intended for authorized security assessments.

## Features
- Tests for blind, error-based, and time-based SQL injection vulnerabilities.
- Supports GET and POST requests.
- Extracts database version, user, and database name (MySQL, PostgreSQL, SQLite).
- Dumps table names and columns from the target database.
- Saves results to a CSV file.
- Includes basic tamper scripts (e.g., space-to-comment) for bypassing weak WAFs.
- Lightweight and optimized for Kali Linux.

## Prerequisites
- Kali Linux (or similar environment)
- Python 3.6 or higher
- Python libraries: `requests`
- A web application with a testable URL and parameter

## Installation

### Setup
1. Clone or download the repository.
2. Run the setup script to create a virtual environment and install dependencies:
   ```bash
   chmod +x set_upfile.sh
   ./set_upfile.sh
   ```
3. Activate the virtual environment:
   ```bash
   source venv/bin/activate
   ```

## Usage
Run the tool with:
```bash
python sqlprobe.py -u <URL> -p <parameter> [-m <method>] [-d <data>] [-o <output>] [--tamper]
```

- **-u, --url**: Target URL (e.g., `http://example.com/page?id=1`).
- **-p, --param**: Parameter to test (e.g., `id`).
- **-m, --method**: HTTP method (`GET` or `POST`, default: `GET`).
- **-d, --data**: POST data (e.g., `username=admin&password=test`).
- **-o, --output**: Output CSV file (default: `sqlprobe_results.csv`).
- **--tamper**: Apply tamper scripts (e.g., space-to-comment).

### Examples
1. **Test a GET parameter**:
   ```bash
   python sqlprobe.py -u "http://example.com/page?id=1" -p id
   ```
   Output:
   ```
   [*] Starting SQL injection tests...
   [+] Blind SQL injection detected with payload: ' AND 1=1 --
   [+] Version: 8.0.30-MySQL
   [+] User: root@localhost
   [+] Database: testdb
   [+] Table: users, Columns: id, username, password
   [*] Results saved to sqlprobe_results.csv
   ```

2. **Test a POST parameter with tamper**:
   ```bash
   python sqlprobe.py -u "http://example.com/login" -p username -m POST -d "username=admin&password=test" --tamper
   ```

3. **Custom output file**:
   ```bash
   python sqlprobe.py -u "http://example.com/page?id=1" -p id -o results.csv
   ```

## Output Format
Results are saved in CSV format:
```csv
table,columns
users,"id,username,password"
posts,"id,title,content"
```

## Limitations
- Simplified compared to `sqlmap`; lacks advanced features like stacked queries, out-of-band exploitation, or database-specific optimizations.
- Basic tamper scripts; not effective against strong WAFs.
- Assumes UTF-8 encoded responses and simple response parsing.
- Limited to MySQL, PostgreSQL, and SQLite; no Oracle or MSSQL support.
- Requires manual URL and parameter specification.

## License
MIT License

## Warning
SQLProbe is for ethical penetration testing and authorized security assessments only. Unauthorized use against systems you do not own or have permission to test is illegal and unethical. Always obtain explicit permission before testing. The author is not responsible for misuse.