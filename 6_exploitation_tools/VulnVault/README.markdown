# VulnVault

## Overview
VulnVault is a lightweight command-line tool inspired by ExploitDB, designed for penetration testers to manage and search a local repository of exploits and vulnerabilities. It supports offline searches by keywords, CVE identifiers, platforms, or exploit types, making it ideal for security assessments on air-gapped networks. The tool uses a SQLite database for fast searches and a CSV file to index exploits.

## Features
- Indexes exploits in a SQLite database from a CSV file.
- Searches exploits by keywords, CVE, platform, or type (e.g., remote, local, webapps).
- Mirrors exploit files to the current directory for easy access.
- Includes a sample exploit and repository structure.
- Lightweight and designed for Kali Linux or similar environments.

## Prerequisites
- Python 3.6 or higher
- Bash (for the setup script)
- Write access to `/opt/vulnvault` (default repository path)

## Installation

### Setup
1. Clone or download the repository.
2. Run the setup script to create a virtual environment, install dependencies, and set up the repository:
   ```bash
   chmod +x set_upfile.sh
   ./set_upfile.sh
   ```
3. Activate the virtual environment:
   - On Linux/macOS:
     ```bash
     source venv/bin/activate
     ```
   - On Windows (if using a compatible shell):
     ```bash
     venv\Scripts\activate
     ```

## Repository Setup
1. The setup script creates a repository at `/opt/vulnvault` with:
   - `exploits.csv`: Indexes exploits (fields: id, title, cve, platform, type, path).
   - `exploits/`: Directory for exploit files (e.g., `sample_exploit.py`).
   - `vulnvault.db`: SQLite database for searches.
2. Edit `exploits.csv` to add new exploits and run `python vulnvault.py --index` to update the database.

## Usage
Run the tool with:
```bash
python vulnvault.py [terms] [--cve <CVE>] [--platform <platform>] [--type <type>] [--mirror <id>] [--index] [--repo <path>]
```

- **terms**: Search terms (e.g., `joomla sql`).
- **--cve**: Filter by CVE (e.g., `CVE-2023-1234`).
- **--platform**: Filter by platform (e.g., `windows`, `linux`, `webapps`).
- **--type**: Filter by exploit type (e.g., `remote`, `local`, `webapps`).
- **--mirror**: Copy exploit file by ID to current directory.
- **--index**: Index exploits from `exploits.csv`.
- **--repo**: Path to repository (default: `/opt/vulnvault`).

### Examples
1. **Search for Joomla exploits**:
   ```bash
   python vulnvault.py joomla
   ```
   Output:
   ```
   ID | Title | CVE | Platform | Type | Path
   --------------------------------------------------------------------------------
   VV-0001 | Joomla SQL Injection (Demo) | CVE-2023-1234 | Webapps | Remote | /opt/vulnvault/exploits/sample_exploit.py
   ```

2. **Search by CVE**:
   ```bash
   python vulnvault.py --cve CVE-2023-1234
   ```

3. **Mirror an exploit**:
   ```bash
   python vulnvault.py --mirror VV-0001
   ```
   Copies `sample_exploit.py` to the current directory.

4. **Index new exploits**:
   ```bash
   python vulnvault.py --index
   ```

## Repository Structure
```
/opt/vulnvault/
├── exploits.csv          # CSV index of exploits
├── vulnvault.db          # SQLite database
├── exploits/
│   └── sample_exploit.py # Sample exploit file
```

### Sample exploits.csv
```csv
id,title,cve,platform,type,path
VV-0001,Joomla SQL Injection (Demo),CVE-2023-1234,Webapps,Remote,/opt/vulnvault/exploits/sample_exploit.py
```

## Limitations
- Simplified compared to ExploitDB; lacks web interface and advanced search filters (e.g., author, port).
- Requires manual CSV updates to add new exploits.
- No integration with external databases or Metasploit.
- Assumes UTF-8 encoded files.

## License
MIT License

## Warning
This tool is for ethical penetration testing and authorized security assessments only. Unauthorized use against systems you do not own or have permission to test is illegal and unethical. Always obtain explicit permission before testing.