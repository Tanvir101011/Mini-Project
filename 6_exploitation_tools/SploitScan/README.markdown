# SploitScan

## Overview
SploitScan is a command-line tool for penetration testers to search and manage a local exploit database offline, designed for Kali Linux. It allows searching for exploits by keywords, CVE identifiers, platforms, or types, with features to mirror files to the current directory. The tool uses a SQLite database for fast searches and a CSV file to index exploits.

## Features
- Indexes exploits in a SQLite database from a CSV file.
- Searches exploits by keywords, CVE, platform, or type (e.g., remote, local, webapps).
- Supports case-sensitive searches.
- Mirrors exploit files to the current directory.
- Includes a sample exploit and repository structure.
- Lightweight and optimized for Kali Linux.

## Prerequisites
- Python 3.6 or higher
- Bash (for the setup script)
- Write access to `/opt/sploitscan` (default repository path)

## Installation

### Setup
1. Clone or download the repository.
2. Run the setup script to create a virtual environment, set up the repository, and copy sample files:
   ```bash
   chmod +x set_upfile.sh
   ./set_upfile.sh
   ```
3. Activate the virtual environment:
   - On Linux/macOS:
     ```bash
     source venv/bin/activate
     ```
   - On Windows (if using a compatible shell):
     ```bash
     venv\Scripts\activate
     ```

## Repository Setup
1. The setup script creates a repository at `/opt/sploitscan` with:
   - `exploits.csv`: Indexes exploits (fields: id, title, cve, platform, type, path).
   - `exploits/`: Directory for exploit files (e.g., `sample_exploit.py`).
   - `sploitscan.db`: SQLite database for searches.
2. Edit `exploits.csv` to add new exploits and run `python sploitscan.py --index` to update the database.

## Usage
Run the tool with:
```bash
python sploitscan.py [terms] [-c <CVE>] [-p <platform>] [-t <type>] [-m <id>] [-i] [-s] [--repo <path>]
```

- **terms**: Search terms (e.g., `wordpress remote`).
- **-c, --cve**: Filter by CVE (e.g., `CVE-2023-5678`).
- **-p, --platform**: Filter by platform (e.g., `windows`, `linux`, `webapps`).
- **-t, --type**: Filter by exploit type (e.g., `remote`, `local`, `webapps`).
- **-m, --mirror**: Copy exploit file by ID to current directory.
- **-i, --index**: Index exploits from `exploits.csv`.
- **-s, --case-sensitive**: Perform case-sensitive search.
- **--repo**: Path to repository (default: `/opt/sploitscan`).

### Examples
1. **Search for WordPress exploits**:
   ```bash
   python sploitscan.py wordpress
   ```
   Output:
   ```
   ID | Title | CVE | Platform | Type | Path
   --------------------------------------------------------------------------------
   SS-0001 | WordPress Admin Bypass (Demo) | CVE-2023-5678 | Webapps | Remote | /opt/sploitscan/exploits/sample_exploit.py
   ```

2. **Search by CVE**:
   ```bash
   python sploitscan.py -c CVE-2023-5678
   ```

3. **Case-sensitive search**:
   ```bash
   python sploitscan.py WordPress -s
   ```

4. **Mirror an exploit**:
   ```bash
   python sploitscan.py -m SS-0001
   ```
   Copies `sample_exploit.py` to the current directory.

5. **Index new exploits**:
   ```bash
   python sploitscan.py -i
   ```

## Repository Structure
```
/opt/sploitscan/
├── exploits.csv          # CSV index of exploits
├── sploitscan.db         # SQLite database
├── exploits/
│   └── sample_exploit.py # Sample exploit file
```

### Sample exploits.csv
```csv
id,title,cve,platform,type,path
SS-0001,WordPress Admin Bypass (Demo),CVE-2023-5678,Webapps,Remote,/opt/sploitscan/exploits/sample_exploit.py
```

## Limitations
- Requires manual CSV updates to add new exploits.
- No support for online database syncing or binary exploits.
- Assumes UTF-8 encoded files.

## License
MIT License

## Warning
This tool is for ethical penetration testing and authorized security assessments only. Unauthorized use against systems you do not own or have permission to test is illegal and unethical. Always obtain explicit permission before testing.