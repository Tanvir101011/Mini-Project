# OracleScan

## Description
OracleScan is a Python tool for studying Oracle database enumeration in your private lab. It scans Oracle instances to identify open ports and enumerate SIDs, and includes a placeholder for testing default credentials, inspired by Oscanner. Designed for personal experimentation, it targets Oracle databases you own or have explicit permission to test, such as a local Oracle XE instance in a home lab.

**Important**: Use OracleScan only on databases you own or have clear permission to test. Unauthorized access to databases is illegal and may lead to legal consequences or data breaches. The tool is restricted to your lab to ensure ethical use.

## Features
- **Port Scanning**: Identifies open Oracle ports (e.g., 1521).
- **SID Enumeration**: Tests common or user-provided SIDs via TNS queries.
- **Credential Testing**: Placeholder for testing default credentials (not fully implemented).
- **Logging**: Saves results to `oraclescan.log` and timestamped files.
- **Quiet Mode**: Minimizes terminal output.
- **Configurable**: Supports target IP, port ranges, and SID files.
- **Educational**: Simple design for learning Oracle DB enumeration.

## Installation
1. **Requirements**:
   - Linux (e.g., Ubuntu 24.04, verify with `uname -a`).
   - Python 3.12+ (verify with `python3 --version`).
   - Network access to a lab Oracle instance (e.g., `192.168.1.100:1521`).
   - Private network you control.
2. **Install Dependencies**:
   - Save `setup_oraclescan.sh` to a directory (e.g., `/home/user/oraclescan/`).
   - Make executable and run:
     ```bash
     chmod +x setup_oraclescan.sh
     ./setup_oraclescan.sh
     ```
   - No external libraries needed (uses standard `socket`).
3. Save `oraclescan.py` to the same directory.
4. Verify:
   ```bash
   python3 oraclescan.py --help
   ```

## Usage
OracleScan probes Oracle databases to study port and SID enumeration. Below are examples and expected outcomes.

### Basic Commands
Scan default port 1521:
```bash
python3 oraclescan.py -t 192.168.1.100 -p 1521
```

Scan multiple ports with a SID file:
```bash
python3 oraclescan.py -t 192.168.1.100 -p 1521,1522-1525 -s sids.txt
```

### Options
- `-t, --target`: Target IP (required, e.g., `192.168.1.100`).
- `-p, --ports`: Ports (default: `1521`, e.g., `1521,1522-1525`).
- `-s, --sid-file`: File with SIDs (one per line).
- `-q, --quiet`: Log to file only.

### Features

#### Port Scanning
- **Purpose**: Identify open Oracle ports.
- **Usage**:
  ```bash
  python3 oraclescan.py -t 192.168.1.100 -p 1521-1523
  ```
- **Output**:
  ```
  2025-05-15 12:40:00 - Starting OracleScan on 192.168.1.100, ports: [1521, 1522, 1523]
  2025-05-15 12:40:01 - Port 1521 is open
  2025-05-15 12:40:01 - Port 1522 is closed
  ```
- **Tips**: Verify with `netcat -zv 192.168.1.100 1521`.

#### SID Enumeration
- **Purpose**: Test SIDs to identify valid instances.
- **Usage**:
  ```bash
  python3 oraclescan.py -t 192.168.1.100 -p 1521 -s sids.txt
  ```
- **Output**:
  ```
  2025-05-15 12:45:00 - Port 1521: SID ORCL - Valid
  2025-05-15 12:45:01 - Port 1521: SID XE - Refused
  ```
- **Result File** (`oraclescan_results_20250515_124500.txt`):
  ```
  [2025-05-15 12:45:00] Port 1521: SID ORCL - Valid
  ```
- **Tips**: Create `sids.txt` with SIDs (e.g., `ORCL`, `XE`); test on local Oracle XE.

#### Credential Testing
- **Purpose**: Placeholder for testing credentials (simplified).
- **Output Example**:
  ```
  Port 1521: SID ORCL - Credential test sys:change_on_install (not implemented)
  ```
- **Tips**: Extend with `cx_Oracle` for full testing if needed.

#### Quiet Mode
- **Purpose**: Reduce terminal output.
- **Usage**:
  ```bash
  python3 oraclescan.py -t 192.168.1.100 -p 1521 -q
  ```
- **Tips**: Check `oraclescan.log` with `tail -f oraclescan.log`.

### Workflow
1. Set up lab (VM with Oracle XE at `192.168.1.100:1521`).
2. Install dependencies:
   ```bash
   ./setup_oraclescan.sh
   ```
3. Run scan:
   ```bash
   python3 oraclescan.py -t 192.168.1.100 -p 1521 -s sids.txt -q
   ```
4. Check logs/results; verify with `netcat`.
5. Stop with `Ctrl+C`; secure outputs (`rm oraclescan_*.txt`).

## Output
- **Logs**: `oraclescan.log`.
- **Results**: `oraclescan_results_<timestamp>.txt`, e.g.:
  ```
  [2025-05-15 12:45:00] Port 1521: SID ORCL - Valid
  [2025-05-15 12:45:01] Scan complete
  ```

## Notes
- **Environment**: Use on authorized databases (e.g., local Oracle XE).
- **Impact**: Minimal, but unauthorized scanning is illegal.
- **Ethics**: Avoid unauthorized use to prevent legal/data issues.

## Disclaimer
**Personal Use Only**: OracleScan is for learning on databases you own or have permission to test. Unauthorized use is illegal and may lead to legal consequences or data breaches. Ensure compliance with local laws.

**Safe Use**:
- Use in a private lab (e.g., VM with Oracle XE).
- Secure outputs (`oraclescan.log`, `oraclescan_results_*.txt`); delete after use.
- No warranty; use at your own risk.

**Avoid**:
- Public/corporate databases without permission.
- Sharing sensitive output files.
- Production systems to prevent disruptions.

## Limitations
- Simplified TNS queries; Oscanner supports more protocols.
- Credential testing is a placeholder (extend with `cx_Oracle` for full functionality).
- No GUI or advanced analysis.
- Depends on network access and Oracle configuration.

## Tips
- Install Oracle XE in your lab (`sudo apt install oracle-xe`).
- Verify target (`netcat -zv 192.168.1.100 1521`).
- Use Wireshark to monitor TNS packets.
- Test mitigations (e.g., Oracle listener restrictions).
- Isolate setup to avoid misuse.

## License
For personal educational use; no formal license. Use responsibly.