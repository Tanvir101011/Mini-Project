# BufferBuster

## Description
BufferBuster is a Python tool for studying buffer overflow vulnerabilities in network protocols within your private lab. It sends oversized or malformed packets to protocols (e.g., FTP, HTTP, SMTP) and logs server responses to detect crashes, inspired by Doona (a BED fork). Designed for personal experimentation, it targets servers you own or have explicit permission to test, such as a local FTP server in your home lab.

**Important**: Use BufferBuster only on servers you own or have clear permission to test. Unauthorized testing is illegal and may cause service disruptions or legal consequences. The tool is restricted to your lab to ensure ethical use.

## Features
- **Protocol Fuzzing**: Tests FTP, HTTP, SMTP with oversized payloads.
- **Crash Detection**: Logs responses to identify potential crashes.
- **Configurable**: Supports target IP, port, protocol, and payload size.
- **Logging**: Saves results to `bufferbuster.log` and timestamped files.
- **Quiet Mode**: Minimizes terminal output.
- **Educational**: Simple design for learning protocol vulnerabilities.

## Installation
1. **Requirements**:
   - Linux (e.g., Ubuntu 24.04, verify with `uname -a`).
   - Python 3.12+ (verify with `python3 --version`).
   - Local server (e.g., vsftpd for FTP, `python3 -m http.server` for HTTP).
   - Private network you control.
2. **Install Dependencies**:
   - Save `setup_bufferbuster.sh` to a directory (e.g., `/home/user/bufferbuster/`).
   - Make executable and run:
     ```bash
     chmod +x setup_bufferbuster.sh
     ./setup_bufferbuster.sh
     ```
   - No external libraries needed (uses `socket`).
3. Save `bufferbuster.py` to the same directory.
4. Verify:
   ```bash
   python3 bufferbuster.py --help
   ```

## Usage
BufferBuster sends malformed packets to test protocol robustness. Below are examples and expected outcomes.

### Basic Commands
Test FTP on port 21:
```bash
python3 bufferbuster.py -t 192.168.1.100 -p 21 -m ftp -s 1000
```

Test HTTP with larger payload:
```bash
python3 bufferbuster.py -t 192.168.1.100 -p 80 -m http -s 5000 -q
```

### Options
- `-t, --target`: Target IP (required, e.g., `192.168.1.100`).
- `-p, --port`: Target port (required, e.g., `21`).
- `-m, --protocol`: Protocol (required, `ftp`, `http`, `smtp`).
- `-s, --size`: Payload size (default: 1000).
- `-q, --quiet`: Log to file only.

### Features

#### Protocol Fuzzing
- **Purpose**: Send oversized payloads to trigger buffer overflows.
- **Usage**:
  ```bash
  python3 bufferbuster.py -t 192.168.1.100 -p 21 -m ftp -s 1000
  ```
- **Output**:
  ```
  2025-05-15 12:40:00 - Starting BufferBuster on 192.168.1.100:21, protocol: ftp, size: 1000
  2025-05-15 12:40:01 - No response (possible crash)
  ```
- **Result File** (`bufferbuster_results_20250515_124000.txt`):
  ```
  [2025-05-15 12:40:01] No response (possible crash)
  ```
- **Tips**: Test on local vsftpd (`sudo apt install vsftpd`); monitor with `netcat -lvp 21`.

#### Crash Detection
- **Purpose**: Identify server crashes via timeouts or resets.
- **Tips**: Check server logs or restart service to confirm crash.

#### Quiet Mode
- **Purpose**: Reduce terminal output.
- **Usage**:
  ```bash
  python3 bufferbuster.py -t 192.168.1.100 -p 80 -m http -q
  ```
- **Tips**: Check `bufferbuster.log` with `tail -f bufferbuster.log`.

### Workflow
1. Set up lab (VM with FTP/HTTP server at `192.168.1.100`).
2. Install dependencies:
   ```bash
   ./setup_bufferbuster.sh
   ```
3. Run test:
   ```bash
   python3 bufferbuster.py -t 192.168.1.100 -p 21 -m ftp -s 1000 -q
   ```
4. Check logs/results; verify server status.
5. Stop with `Ctrl+C`; secure outputs (`rm bufferbuster_*.txt`).

## Output
- **Logs**: `bufferbuster.log`.
- **Results**: `bufferbuster_results_<timestamp>.txt`, e.g.:
  ```
  [2025-05-15 12:40:01] No response (possible crash)
  [2025-05-15 12:40:02] Test complete
  ```

## Notes
- **Environment**: Use on authorized servers (e.g., local FTP).
- **Impact**: May cause DoS; test in isolated setups.
- **Ethics**: Avoid unauthorized use to prevent legal/service issues.

## Disclaimer
**Personal Use Only**: BufferBuster is for learning on servers you own or have permission to test. Unauthorized use is illegal and may cause disruptions or legal consequences. Ensure compliance with local laws.

**Safe Use**:
- Use in a private lab (e.g., VM with local server).
- Secure outputs (`bufferbuster.log`, `bufferbuster_results_*.txt`); delete after use.
- No warranty; use at your own risk.

**Avoid**:
- Public/corporate servers without permission.
- Sharing sensitive output files.
- Production systems to prevent outages.

## Limitations
- Supports FTP, HTTP, SMTP only; Doona covers more protocols.
- Basic fuzzing; no advanced payload generation.
- Depends on server configuration and timeout settings.

## Tips
- Set up vsftpd (`sudo apt install vsftpd`) or HTTP server (`python3 -m http.server`).
- Verify target (`netcat -zv 192.168.1.100 21`).
- Monitor with Wireshark or server logs.
- Test mitigations (e.g., input validation).
- Isolate setup to avoid misuse.

## License
For personal educational use; no formal license. Use responsibly.