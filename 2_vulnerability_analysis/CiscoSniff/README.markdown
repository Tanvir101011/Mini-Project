# CiscoSniff

## Description
CiscoSniff is a Python tool for studying Cisco device vulnerabilities in your private lab. It scans for open ports (e.g., Telnet, HTTP, SNMP) and enumerates SNMP community strings, logging results in text and JSON formats, inspired by Cisco-OCR. Designed for personal experimentation, it targets Cisco devices you own or have explicit permission to test, such as a lab router in your home network.

**Important**: Use CiscoSniff only on devices you own or have clear permission to test. Unauthorized scanning is illegal and may lead to legal consequences or network issues. The tool is restricted to your lab to ensure ethical use.

## Features
- **Port Scanning**: Identifies open ports (e.g., 23, 80, 161).
- **SNMP Enumeration**: Tests community strings (e.g., “public”).
- **JSON Output**: Saves results in JSON for parsing/automation.
- **Logging**: Saves results to `ciscosniff.log` and timestamped files.
- **Quiet Mode**: Minimizes terminal output.
- **Configurable**: Supports target IP, port ranges, and community files.
- **Educational**: Simple design for learning device security.

## Installation
1. **Requirements**:
   - Linux (e.g., Ubuntu 24.04, verify with `uname -a`).
   - Python 3.12+ (verify with `python3 --version`).
   - Network access to a lab Cisco device (e.g., `192.168.1.1`).
   - Private network you control.
2. **Install Dependencies**:
   - Save `setup_ciscosniff.sh` to a directory (e.g., `/home/user/ciscosniff/`).
   - Make executable and run:
     ```bash
     chmod +x setup_ciscosniff.sh
     ./setup_ciscosniff.sh
     ```
   - Installs `pysnmp`.
3. Save `ciscosniff.py` to the same directory.
4. Verify:
   ```bash
   python3 ciscosniff.py --help
   ```

## Usage
CiscoSniff probes Cisco devices to identify open ports and services. Below are examples and expected outcomes.

### Basic Commands
Scan default ports:
```bash
python3 ciscosniff.py -t 192.168.1.1 -p 23,80,161
```

Scan with community file:
```bash
python3 ciscosniff.py -t 192.168.1.1 -p 161 -c communities.txt -q
```

### Options
- `-t, --target`: Target IP (required, e.g., `192.168.1.1`).
- `-p, --ports`: Ports (default: `23,80,161`, e.g., `23,80,161-163`).
- `-c, --community-file`: File with SNMP community strings (one per line).
- `-q, --quiet`: Log to file only.

### Features

#### Port Scanning
- **Purpose**: Identify open ports on Cisco devices.
- **Usage**:
  ```bash
  python3 ciscosniff.py -t 192.168.1.1 -p 23,80,161
  ```
- **Output**:
  ```
  2025-05-15 12:39:00 - Starting CiscoSniff on 192.168.1.1, ports: [23, 80, 161]
  2025-05-15 12:39:01 - Port 23 is open
  2025-05-15 12:39:01 - Port 80 is closed
  ```
- **Result File** (`ciscosniff_results_20250515_123900.txt`):
  ```
  [2025-05-15 12:39:01] Port 23 is open
  ```
- **JSON File** (`ciscosniff_results_20250515_123900.json`):
  ```json
  {
    "target": "192.168.1.1",
    "results": [
      {"port": 23, "status": "open", "service": null},
      {"port": 80, "status": "closed", "service": null}
    ],
    "timestamp": "2025-05-15 12:39:01"
  }
  ```
- **Tips**: Verify with `netcat -zv 192.168.1.1 23`.

#### SNMP Enumeration
- **Purpose**: Test SNMP community strings.
- **Usage**:
  ```bash
  python3 ciscosniff.py -t 192.168.1.1 -p 161 -c communities.txt
  ```
- **Output**:
  ```
  2025-05-15 12:39:02 - SNMP accessible with community 'public'
  ```
- **Tips**: Create `communities.txt` with strings (e.g., `public`, `private`).

#### Quiet Mode
- **Purpose**: Reduce terminal output.
- **Usage**:
  ```bash
  python3 ciscosniff.py -t 192.168.1.1 -p 23,80,161 -q
  ```
- **Tips**: Check `ciscosniff.log` with `tail -f ciscosniff.log`.

### Workflow
1. Set up lab (VM with Cisco device at `192.168.1.1`).
2. Install dependencies:
   ```bash
   ./setup_ciscosniff.sh
   ```
3. Run scan:
   ```bash
   python3 ciscosniff.py -t 192.168.1.1 -p 23,80,161 -c communities.txt -q
   ```
4. Check logs/results (text/JSON); verify with `netcat`.
5. Stop with `Ctrl+C`; secure outputs (`rm ciscosniff_*.txt ciscosniff_*.json`).

## Output
- **Logs**: `ciscosniff.log`.
- **Results**: `ciscosniff_results_<timestamp>.txt` and `.json`, e.g.:
  ```
  [2025-05-15 12:39:01] Port 23 is open
  [2025-05-15 12:39:02] Scan complete
  ```

## Notes
- **Environment**: Use on authorized devices (e.g., lab router).
- **Impact**: Minimal, but unauthorized scanning is illegal.
- **Ethics**: Avoid unauthorized use to prevent legal/network issues.

## Disclaimer
**Personal Use Only**: CiscoSniff is for learning on devices you own or have permission to test. Unauthorized use is illegal and may lead to legal consequences or network issues. Ensure compliance with local laws.

**Safe Use**:
- Use in a private lab (e.g., VM with Cisco device).
- Secure outputs (`ciscosniff.log`, `ciscosniff_results_*.txt/json`); delete after use.
- No warranty; use at your own risk.

**Avoid**:
- Public/corporate devices without permission.
- Sharing sensitive output files.
- Production networks to prevent disruptions.

## Limitations
- Scans Telnet, HTTP, SNMP; Cisco-OCR may cover more services.
- Basic SNMP enumeration; no advanced MIB walking.
- Depends on network access and device configuration.

## Tips
- Set up a Cisco emulator (e.g., GNS3) in your lab.
- Verify target (`ping 192.168.1.1`).
- Use Wireshark to monitor SNMP traffic.
- Test mitigations (e.g., disable Telnet, secure SNMP).
- Isolate setup to avoid misuse.

## License
For personal educational use; no formal license. Use responsibly.