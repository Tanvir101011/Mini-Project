import argparse
import logging
import socket
import sys
import time
import json
from typing import List, Optional
from pysnmp.hlapi import *

# Configure logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(message)s',
    handlers=[
        logging.FileHandler('ciscosniff.log'),
        logging.StreamHandler(sys.stdout)
    ]
)

class CiscoSniff:
    def __init__(self, target: str, ports: List[int], community_file: Optional[str] = None, quiet: bool = False):
        self.target = target
        self.ports = ports
        self.community_file = community_file
        self.quiet = quiet
        self.communities = self.load_communities() if community_file else ['public', 'private']
        self.results = []
        self.output_file = f"ciscosniff_results_{time.strftime('%Y%m%d_%H%M%S')}.txt"
        self.json_file = f"ciscosniff_results_{time.strftime('%Y%m%d_%H%M%S')}.json"

    def load_communities(self) -> List[str]:
        """Load SNMP community strings from file."""
        try:
            with open(self.community_file, 'r') as f:
                return [line.strip() for line in f if line.strip()]
        except Exception as e:
            logging.error(f"Error reading community file: {e}")
            return ['public', 'private']

    def scan_port(self, port: int) -> bool:
        """Check if port is open."""
        try:
            with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as sock:
                sock.settimeout(2)
                return sock.connect_ex((self.target, port)) == 0
        except Exception as e:
            logging.debug(f"Port scan error on {self.target}:{port}: {e}")
            return False

    def test_snmp(self, port: int) -> Optional[str]:
        """Test SNMP community strings."""
        try:
            for community in self.communities:
                errorIndication, errorStatus, errorIndex, varBinds = next(
                    getCmd(SnmpEngine(),
                           CommunityData(community),
                           UdpTransportTarget((self.target, port)),
                           ContextData(),
                           ObjectType(ObjectIdentity('1.3.6.1.2.1.1.1.0')))
                )
                if not errorIndication and not errorStatus:
                    return f"SNMP accessible with community '{community}'"
            return None
        except Exception as e:
            logging.debug(f"SNMP test error on {self.target}:{port}: {e}")
            return None

    def run(self):
        """Run Cisco device scan."""
        logging.info(f"Starting CiscoSniff on {self.target}, ports: {self.ports}")
        scan_results = []
        for port in self.ports:
            if self.scan_port(port):
                result = f"Port {port} is open"
                self.results.append(result)
                scan_results.append({"port": port, "status": "open", "service": None})
                logging.info(result)
                if port == 161:  # SNMP port
                    snmp_result = self.test_snmp(port)
                    if snmp_result:
                        self.results.append(snmp_result)
                        scan_results.append({"port": port, "status": "open", "service": snmp_result})
                        logging.info(snmp_result)
            else:
                result = f"Port {port} is closed"
                self.results.append(result)
                scan_results.append({"port": port, "status": "closed", "service": None})
                logging.info(result)

        # Save text results
        with open(self.output_file, 'a') as f:
            for result in self.results:
                f.write(f"[{time.strftime('%Y-%m-%d %H:%M:%S')}] {result}\n")
            f.write(f"[{time.strftime('%Y-%m-%d %H:%M:%S')}] Scan complete\n")

        # Save JSON results
        with open(self.json_file, 'w') as f:
            json.dump({"target": self.target, "results": scan_results, "timestamp": time.strftime('%Y-%m-%d %H:%M:%S')}, f, indent=4)

        logging.info(f"Scan complete. Results saved to {self.output_file} and {self.json_file}")

def main():
    parser = argparse.ArgumentParser(description="CiscoSniff - Scan Cisco devices for vulnerabilities.")
    parser.add_argument('-t', '--target', required=True, help='Target IP (e.g., 192.168.1.1)')
    parser.add_argument('-p', '--ports', default='23,80,161', help='Ports to scan (e.g., 23,80,161)')
    parser.add_argument('-c', '--community-file', help='File with SNMP community strings (one per line)')
    parser.add_argument('-q', '--quiet', action='store_true', help='Quiet mode (log to file only)')

    args = parser.parse_args()

    ports = []
    for p in args.ports.split(','):
        if '-' in p:
            start, end = map(int, p.split('-'))
            ports.extend(range(start, end + 1))
        else:
            ports.append(int(p))

    if args.quiet:
        logging.getLogger().handlers = [logging.FileHandler('ciscosniff.log')]

    sniffer = CiscoSniff(target=args.target, ports=ports, community_file=args.community_file, quiet=args.quiet)
    try:
        sniffer.run()
    except KeyboardInterrupt:
        logging.info("Scan interrupted by user")
        sys.exit(0)

if __name__ == "__main__":
    main()