import argparse
import logging
import sys
import time
import json
import requests
import threading
from typing import Optional

# Configure logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(message)s',
    handlers=[
        logging.FileHandler('stressblast.log'),
        logging.StreamHandler(sys.stdout)
    ]
)

class StressBlast:
    def __init__(self, url: str, threads: int, delay: float, method: str, data: Optional[str], quiet: bool = False):
        self.url = url
        self.threads = threads
        self.delay = delay
        self.method = method.lower()
        self.data = data
        self.quiet = quiet
        self.results = []
        self.output_file = f"stressblast_results_{time.strftime('%Y%m%d_%H%M%S')}.txt"
        self.json_file = f"stressblast_results_{time.strftime('%Y%m%d_%H%M%S')}.json"
        self.session = requests.Session()
        self.session.headers.update({'User-Agent': 'StressBlast/1.0'})
        self.running = False

    def send_request(self, request_id: int):
        """Send a single HTTP request."""
        try:
            start_time = time.time()
            if self.method == 'get':
                response = self.session.get(self.url, timeout=5)
            else:
                response = self.session.post(self.url, data=self.data, timeout=5)
            elapsed = time.time() - start_time
            result = f"Request {request_id}: Status {response.status_code}, Time {elapsed:.2f}s"
            self.results.append(result)
            logging.info(result)
            return {"request_id": request_id, "status": response.status_code, "time": elapsed}
        except Exception as e:
            result = f"Request {request_id}: Error: {str(e)}"
            self.results.append(result)
            logging.info(result)
            return {"request_id": request_id, "status": "error", "error": str(e)}

    def worker(self):
        """Worker thread to send requests."""
        request_id = threading.get_ident()
        while self.running:
            json_result = self.send_request(request_id)
            with threading.Lock():
                self.json_results.append(json_result)
            time.sleep(self.delay)

    def run(self):
        """Run stress test."""
        logging.info(f"Starting StressBlast on {self.url}, threads: {self.threads}, method: {self.method}")
        self.running = True
        self.json_results = []
        threads = []

        for _ in range(self.threads):
            t = threading.Thread(target=self.worker)
            t.start()
            threads.append(t)

        try:
            for t in threads:
                t.join()
        except KeyboardInterrupt:
            self.stop()

    def stop(self):
        """Stop stress test and save results."""
        self.running = False
        logging.info("StressBlast stopped")
        with open(self.output_file, 'a') as f:
            for result in self.results:
                f.write(f"[{time.strftime('%Y-%m-%d %H:%M:%S')}] {result}\n")
            f.write(f"[{time.strftime('%Y-%m-%d %H:%M:%S')}] Stress test complete\n")
        with open(self.json_file, 'w') as f:
            json.dump({"url": self.url, "threads": self.threads, "method": self.method,
                       "results": self.json_results, "timestamp": time.strftime('%Y-%m-%d %H:%M:%S')}, f, indent=4)
        logging.info(f"Results saved to {self.output_file} and {self.json_file}")

def main():
    parser = argparse.ArgumentParser(description="StressBlast - Stress-test web servers.")
    parser.add_argument('-u', '--url', required=True, help='Target URL (e.g., http://192.168.1.100)')
    parser.add_argument('-t', '--threads', type=int, default=5, help='Number of threads (default: 5)')
    parser.add_argument('-d', '--delay', type=float, default=0.1, help='Delay between requests (seconds, default: 0.1)')
    parser.add_argument('-m', '--method', default='get', choices=['get', 'post'], help='HTTP method (default: get)')
    parser.add_argument('--data', help='POST data (e.g., "key=value")')
    parser.add_argument('-q', '--quiet', action='store_true', help='Quiet mode (log to file only)')

    args = parser.parse_args()

    if args.quiet:
        logging.getLogger().handlers = [logging.FileHandler('stressblast.log')]

    blast = StressBlast(
        url=args.url,
        threads=args.threads,
        delay=args.delay,
        method=args.method,
        data=args.data,
        quiet=args.quiet
    )
    try:
        blast.run()
    except KeyboardInterrupt:
        blast.stop()

if __name__ == "__main__":
    main()