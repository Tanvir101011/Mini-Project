# StressBlast

## Description
StressBlast is a Python tool for studying web server performance in your private lab. It sends concurrent HTTP requests (GET or POST), logging response times and status in text and JSON formats, inspired by Siege. Designed for personal experimentation, it targets servers you own or have explicit permission to test, such as a local web server in your home lab.

**Important**: Use StressBlast only on servers you own or have clear permission to test. Unauthorized stress testing is illegal and may cause service disruptions or legal consequences. The tool is restricted to your lab to ensure ethical use.

## Features
- **Stress Testing**: Sends concurrent GET/POST requests.
- **JSON Output**: Saves results in JSON for parsing/automation.
- **Configurable**: Supports URL, threads, delay, and method.
- **Logging**: Saves results to `stressblast.log` and timestamped files.
- **Quiet Mode**: Minimizes terminal output.
- **Educational**: Simple design for learning server performance.

## Installation
1. **Requirements**:
   - Linux (e.g., Ubuntu 24.04, verify with `uname -a`).
   - Python 3.12+ (verify with `python3 --version`).
   - Local web server (e.g., `python3 -m http.server`).
   - Private network you control.
2. **Install Dependencies**:
   - Save `setup_stressblast.sh` to a directory (e.g., `/home/user/stressblast/`).
   - Make executable and run:
     ```bash
     chmod +x setup_stressblast.sh
     ./setup_stressblast.sh
     ```
   - Installs `requests`.
3. Save `stressblast.py` to the same directory.
4. Verify:
   ```bash
   python3 stressblast.py --help
   ```

## Usage
StressBlast sends HTTP requests to test server performance. Below are examples and expected outcomes.

### Basic Commands
Stress test with GET:
```bash
python3 stressblast.py -u http://192.168.1.100 -t 5 -d 0.1
```

Stress test with POST in quiet mode:
```bash
python3 stressblast.py -u http://192.168.1.100 -t 10 -d 0.2 -m post --data "key=value" -q
```

### Options
- `-u, --url`: Target URL (required, e.g., `http://192.168.1.100`).
- `-t, --threads`: Number of threads (default: 5).
- `-d, --delay`: Delay between requests (seconds, default: 0.1).
- `-m, --method`: HTTP method (`get` or `post`, default: `get`).
- `--data`: POST data (e.g., `key=value`).
- `-q, --quiet`: Log to file only.

### Features

#### Stress Testing
- **Purpose**: Test server performance under load.
- **Usage**:
  ```bash
  python3 stressblast.py -u http://192.168.1.100 -t 5 -d 0.1
  ```
- **Output**:
  ```
  2025-05-15 12:39:00 - Starting StressBlast on http://192.168.1.100, threads: 5, method: get
  2025-05-15 12:39:01 - Request 12345: Status 200, Time 0.05s
  ```
- **Result File** (`stressblast_results_20250515_123900.txt`):
  ```
  [2025-05-15 12:39:01] Request 12345: Status 200, Time 0.05s
  ```
- **JSON File** (`stressblast_results_20250515_123900.json`):
  ```json
  {
    "url": "http://192.168.1.100",
    "threads": 5,
    "method": "get",
    "results": [
      {"request_id": 12345, "status": 200, "time": 0.05}
    ],
    "timestamp": "2025-05-15 12:39:01"
  }
  ```
- **Tips**: Test on local server (`python3 -m http.server`); monitor with `htop`.

#### Quiet Mode
- **Purpose**: Reduce terminal output.
- **Usage**:
  ```bash
  python3 stressblast.py -u http://192.168.1.100 -q
  ```
- **Tips**: Check `stressblast.log` with `tail -f stressblast.log`.

### Workflow
1. Set up lab (VM with web server at `http://192.168.1.100`).
2. Install dependencies:
   ```bash
   ./setup_stressblast.sh
   ```
3. Run test:
   ```bash
   python3 stressblast.py -u http://192.168.1.100 -t 5 -d 0.1 -q
   ```
4. Check logs/results (text/JSON); verify server performance.
5. Stop with `Ctrl+C`; secure outputs (`rm stressblast_*.txt stressblast_*.json`).

## Output
- **Logs**: `stressblast.log`.
- **Results**: `stressblast_results_<timestamp>.txt` and `.json`, e.g.:
  ```
  [