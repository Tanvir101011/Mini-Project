# XSSProbe

## Description
XSSProbe is a Python tool for studying cross-site scripting (XSS) vulnerabilities in web applications within your private lab. It injects payloads (e.g., `<script>alert(1)</script>`) into URL parameters and form inputs, checking responses for execution, inspired by Trity. Designed for personal experimentation, it targets web servers you own or have explicit permission to test, such as a local server in your home lab.

**Important**: Use XSSProbe only on web applications you own or have clear permission to test. Unauthorized testing is illegal and may lead to legal consequences or security breaches. The tool is restricted to your lab to ensure ethical use.

## Features
- **Payload Injection**: Tests URL parameters and forms with XSS payloads.
- **Response Analysis**: Checks for payload execution in responses.
- **Custom Payloads**: Supports user-provided payload files.
- **Logging**: Saves results to `xssprobe.log` and timestamped files.
- **Quiet Mode**: Minimizes terminal output.
- **Configurable**: Supports single URLs and payload customization.
- **Educational**: Simple design for learning web security.

## Installation
1. **Requirements**:
   - Linux (e.g., Ubuntu 24.04, verify with `uname -a`).
   - Python 3.12+ (verify with `python3 --version`).
   - Local web server (e.g., `python3 -m http.server`).
   - Private network you control.
2. **Install Dependencies**:
   - Save `setup_xssprobe.sh` to a directory (e.g., `/home/user/xssprobe/`).
   - Make executable and run:
     ```bash
     chmod +x setup_xssprobe.sh
     ./setup_xssprobe.sh
     ```
   - Installs `requests` and `beautifulsoup4`.
3. Save `xssprobe.py` to the same directory.
4. Verify:
   ```bash
   python3 xssprobe.py --help
   ```

## Usage
XSSProbe tests web applications for XSS by injecting payloads and analyzing responses. Below are examples and expected outcomes.

### Basic Commands
Test a URL:
```bash
python3 xssprobe.py -u http://192.168.1.100/search?q=test
```

Test with a payload file:
```bash
python3 xssprobe.py -u http://192.168.1.100 -p payloads.txt -q
```

### Options
- `-u, --url`: Target URL (required, e.g., `http://192.168.1.100`).
- `-p, --payload-file`: File with payloads (one per line).
- `-q, --quiet`: Log to file only.

### Features

#### Payload Injection
- **Purpose**: Inject XSS payloads into URL parameters and forms.
- **Usage**:
  ```bash
  python3 xssprobe.py -u http://192.168.1.100/search?q=test
  ```
- **Output**:
  ```
  2025-05-15 12:30:00 - Starting XSSProbe on http://192.168.1.100/search?q=test
  2025-05-15 12:30:01 - Vulnerable: http://192.168.1.100/search?q=<script>alert(1)</script> with payload '<script>alert(1)</script>'
  ```
- **Result File** (`xssprobe_results_20250515_123000.txt`):
  ```
  [2025-05-15 12:30:01] Vulnerable: http://192.168.1.100/search?q=<script>alert(1)</script> with payload '<script>alert(1)</script>'
  ```
- **Tips**: Test on a local server (`python3 -m http.server`); use a vulnerable app like DVWA.

#### Response Analysis
- **Purpose**: Check if payloads are reflected in responses.
- **Tips**: Inspect responses in browser dev tools or Wireshark.

#### Custom Payloads
- **Purpose**: Use custom payloads.
- **Usage**:
  - Create `payloads.txt`:
    ```
    <script>alert('xss')</script>
    <svg onload=alert(1)>
    ```
  - Run:
    ```bash
    python3 xssprobe.py -u http://192.168.1.100 -p payloads.txt
    ```
- **Tips**: Add payloads relevant to your app.

#### Quiet Mode
- **Purpose**: Reduce terminal output.
- **Usage**:
  ```bash
  python3 xssprobe.py -u http://192.168.1.100 -q
  ```
- **Tips**: Check `xssprobe.log` with `tail -f xssprobe.log`.

### Workflow
1. Set up lab (VM with local server at `http://192.168.1.100`).
2. Install dependencies:
   ```bash
   ./setup_xssprobe.sh
   ```
3. Run scan:
   ```bash
   python3 xssprobe.py -u http://192.168.1.100/search?q=test -p payloads.txt -q
   ```
4. Check logs/results; verify with browser.
5. Stop with `Ctrl+C`; secure outputs (`rm xssprobe_*.txt`).

## Output
- **Logs**: `xssprobe.log`.
- **Results**: `xssprobe_results_<timestamp>.txt`, e.g.:
  ```
  [2025-05-15 12:30:01] Vulnerable: http://192.168.1.100/search?q=<script>alert(1)</script> with payload '<script>alert(1)</script>'
  [2025-05-15 12:30:02] Scan complete
  ```

## Notes
- **Environment**: Use on authorized web apps (e.g., local server).
- **Impact**: Minimal, but unauthorized testing is illegal.
- **Ethics**: Avoid unauthorized use to prevent legal/security issues.

## Disclaimer
**Personal Use Only**: XSSProbe is for learning on web applications you own or have permission to test. Unauthorized use is illegal and may lead to legal consequences or breaches. Ensure compliance with local laws.

**Safe Use**:
- Use in a private lab (e.g., VM with local server).
- Secure outputs (`xssprobe.log`, `xssprobe_results_*.txt`); delete after use.
- No warranty; use at your own risk.

**Avoid**:
- Public/corporate websites without permission.
- Sharing sensitive output files.
- Production systems to prevent disruptions.

## Limitations
- Tests reflected XSS only; Trity may cover stored/persistent XSS.
- Basic payload set; extend with custom payloads.
- No JavaScript execution analysis (use browser for advanced testing).
- Depends on server configuration.

## Tips
- Set up a vulnerable app (e.g., DVWA in a VM).
- Verify URL (`curl http://192.168.1.100`).
- Use Wireshark to monitor HTTP traffic.
- Test mitigations (e.g., Content Security Policy).
- Isolate setup to avoid misuse.

## License
For personal educational use; no formal license. Use responsibly.