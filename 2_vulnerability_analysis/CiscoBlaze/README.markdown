# CiscoBlaze

## Description
CiscoBlaze is a Python tool for studying Cisco device authentication security in your private lab. It attempts logins via Telnet or SSH, logging successful credentials in text and JSON formats, inspired by Cisco-Torch. Designed for personal experimentation, it targets devices you own or have explicit permission to test, such as a lab router in your home network.

**Important**: Use CiscoBlaze only on devices you own or have clear permission to test. Unauthorized brute-forcing is illegal and may lead to legal consequences or account lockouts. The tool is restricted to your lab to ensure ethical use.

## Features
- **Brute-Force Testing**: Tests Telnet and SSH logins.
- **JSON Output**: Saves results in JSON for parsing/automation.
- **Configurable**: Supports target IP, port, protocol, and credential files.
- **Logging**: Saves results to `ciscoblaze.log` and timestamped files.
- **Quiet Mode**: Minimizes terminal output.
- **Educational**: Simple design for learning authentication security.

## Installation
1. **Requirements**:
   - Linux (e.g., Ubuntu 24.04, verify with `uname -a`).
   - Python 3.12+ (verify with `python3 --version`).
   - Network access to a lab Cisco device (e.g., `192.168.1.1`).
   - Private network you control.
2. **Install Dependencies**:
   - Save `setup_ciscoblaze.sh` to a directory (e.g., `/home/user/ciscoblaze/`).
   - Make executable and run:
     ```bash
     chmod +x setup_ciscoblaze.sh
     ./setup_ciscoblaze.sh
     ```
   - Installs `paramiko`.
3. Save `ciscoblaze.py` to the same directory.
4. Verify:
   ```bash
   python3 ciscoblaze.py --help
   ```

## Usage
CiscoBlaze tests Cisco device logins to study authentication weaknesses. Below are examples and expected outcomes.

### Basic Commands
Test Telnet:
```bash
python3 ciscoblaze.py -t 192.168.1.1 -p 23 -m telnet -u users.txt -w passwords.txt
```

Test SSH in quiet mode:
```bash
python3 ciscoblaze.py -t 192.168.1.1 -p 22 -m ssh -q
```

### Options
- `-t, --target`: Target IP (required, e.g., `192.168.1.1`).
- `-p, --port`: Target port (required, e.g., `23`).
- `-u, --user-file`: File with usernames (one per line).
- `-w, --pass-file`: File with passwords (one per line).
- `-m, --protocol`: Protocol (required, `telnet` or `ssh`).
- `-q, --quiet`: Log to file only.

### Features

#### Brute-Force Testing
- **Purpose**: Test credentials on Telnet/SSH services.
- **Usage**:
  ```bash
  python3 ciscoblaze.py -t 192.168.1.1 -p 23 -m telnet
  ```
- **Output**:
  ```
  2025-05-15 12:39:00 - Starting CiscoBlaze on 192.168.1.1:23, protocol: telnet
  2025-05-15 12:39:01 - Telnet login successful: admin:cisco
  ```
- **Result File** (`ciscoblaze_results_20250515_123900.txt`):
  ```
  [2025-05-15 12:39:01] Telnet login successful: admin:cisco
  ```
- **JSON File** (`ciscoblaze_results_20250515_123900.json`):
  ```json
  {
    "target": "192.168.1.1",
    "port": 23,
    "protocol": "telnet",
    "results": [
      {"user": "admin", "password": "cisco", "status": "success"}
    ],
    "timestamp": "2025-05-15 12:39:01"
  }
  ```
- **Tips**: Create `users.txt` and `passwords.txt` with credentials.

#### Quiet Mode
- **Purpose**: Reduce terminal output.
- **Usage**:
  ```bash
  python3 ciscoblaze.py -t 192.168.1.1 -p 22 -m ssh -q
  ```
- **Tips**: Check `ciscoblaze.log` with `tail -f ciscoblaze.log`.

### Workflow
1. Set up lab (VM with Cisco device at `192.168.1.1`).
2. Install dependencies:
   ```bash
   ./setup_ciscoblaze.sh
   ```
3. Run test:
   ```bash
   python3 ciscoblaze.py -t 192.168.1.1 -p 23 -m telnet -u users.txt -w passwords.txt -q
   ```
4. Check logs/results (text/JSON); verify with manual login.
5. Stop with `Ctrl+C`; secure outputs (`rm ciscoblaze_*.txt ciscoblaze_*.json`).

## Output
- **Logs**: `ciscoblaze.log`.
- **Results**: `ciscoblaze_results_<timestamp>.txt` and `.json`, e.g.:
  ```
  [2025-05-15 12:39:01] Telnet login successful: admin:cisco
  [2025-05-15 12:39:02] Test complete
  ```

## Notes
- **Environment**: Use on authorized devices (e.g., lab router).
- **Impact**: May cause lockouts; test with caution.
- **Ethics**: Avoid unauthorized use to prevent legal/account issues.

## Disclaimer
**Personal Use Only**: CiscoBlaze is for learning on devices you own or have permission to test. Unauthorized use is illegal and may lead to legal consequences or lockouts. Ensure compliance with local laws.

**Safe Use**:
- Use in a private lab (e.g., VM with Cisco device).
- Secure outputs (`ciscoblaze.log`, `ciscoblaze_results_*.txt/json`); delete after use.
- No warranty; use at your own risk.

**Avoid**:
- Public/corporate devices without permission.
- Sharing sensitive output files.
- Production systems to prevent lockouts.

## Limitations
- Supports Telnet, SSH; Cisco-Torch may cover more services.
- Basic brute-forcing; no advanced rate limiting.
- Depends on network access and device configuration.

## Tips
- Set up a Cisco emulator (e.g., GNS3) with Telnet/SSH enabled.
- Verify target (`netcat -zv 192.168.1.1 23`).
- Use Wireshark to monitor login attempts.
- Test mitigations (e.g., strong passwords, SSH keys).
- Isolate setup to avoid misuse.

## License
For personal educational use; no formal license. Use responsibly.