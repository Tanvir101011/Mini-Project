# ProtoFuzz

## Description
ProtoFuzz is a Python tool for studying network protocol vulnerabilities in your private lab. It sends malformed packets to protocols (e.g., HTTP, SMTP, FTP), logging responses in text and JSON formats to detect crashes, inspired by Sfuzz. Designed for personal experimentation, it targets servers you own or have explicit permission to test, such as a local server in your home lab.

**Important**: Use ProtoFuzz only on servers you own or have clear permission to test. Unauthorized fuzzing is illegal and may cause service disruptions or legal consequences. The tool is restricted to your lab to ensure ethical use.

## Features
- **Protocol Fuzzing**: Tests HTTP, SMTP, FTP with random payloads.
- **JSON Output**: Saves results in JSON for parsing/automation.
- **Configurable**: Supports target IP, port, protocol, and packet count.
- **Logging**: Saves results to `protofuzz.log` and timestamped files.
- **Quiet Mode**: Minimizes terminal output.
- **Educational**: Simple design for learning protocol vulnerabilities.

## Installation
1. **Requirements**:
   - Linux (e.g., Ubuntu 24.04, verify with `uname -a`).
   - Python 3.12+ (verify with `python3 --version`).
   - Local server (e.g., vsftpd, `python3 -m http.server`).
   - Root privileges (`sudo`) for Scapy.
   - Private network you control.
2. **Install Dependencies**:
   - Save `setup_protofuzz.sh` to a directory (e.g., `/home/user/protofuzz/`).
   - Make executable and run:
     ```bash
     chmod +x setup_protofuzz.sh
     ./setup_protofuzz.sh
     ```
   - Installs `scapy`.
3. Save `protofuzz.py` to the same directory.
4. Verify:
   ```bash
   sudo python3 protofuzz.py --help
   ```

## Usage
ProtoFuzz sends malformed packets to test protocol robustness. Below are examples and expected outcomes.

### Basic Commands
Fuzz HTTP:
```bash
sudo python3 protofuzz.py -t 192.168.1.100 -p 80 -m http -c 10
```

Fuzz FTP in quiet mode:
```bash
sudo python3 protofuzz.py -t 192.168.1.100 -p 21 -m ftp -c 20 -q
```

### Options
- `-t, --target`: Target IP (required, e.g., `192.168.1.100`).
- `-p, --port`: Target port (required, e.g., `80`).
- `-m, --protocol`: Protocol (required, `http`, `smtp`, `ftp`).
- `-c, --count`: Number of packets (default: 10).
- `-q, --quiet`: Log to file only.

### Features

#### Protocol Fuzzing
- **Purpose**: Send malformed packets to trigger vulnerabilities.
- **Usage**:
  ```bash
  sudo python3 protofuzz.py -t 192.168.1.100 -p 80 -m http -c 10
  ```
- **Output**:
  ```
  2025-05-15 12:39:00 - Starting ProtoFuzz on 192.168.1.100:80, protocol: http, count: 10
  2025-05-15 12:39:01 - Packet 1: No response (possible crash)
  ```
- **Result File** (`protofuzz_results_20250515_123900.txt`):
  ```
  [2025-05-15 12:39:01] Packet 1: No response (possible crash)
  ```
- **JSON File** (`protofuzz_results_20250515_123900.json`):
  ```json
  {
    "target": "192.168.1.100",
    "port": 80,
    "protocol": "http",
    "results": [
      {"packet": 1, "payload": "GET /abc123...", "response": "No response (possible crash)"}
    ],
    "timestamp": "2025-05-15 12:39:01"
  }
  ```
- **Tips**: Test on local vsftpd (`sudo apt install vsftpd`) or HTTP server.

#### Quiet Mode
- **Purpose**: Reduce terminal output.
- **Usage**:
  ```bash
  sudo python3 protofuzz.py -t 192.168.1.100 -p 21 -m ftp -q
  ```
- **Tips**: Check `protofuzz.log` with `tail -f protofuzz.log`.

### Workflow
1. Set up lab (VM with server at `192.168.1.100`).
2. Install dependencies:
   ```bash
   ./setup_protofuzz.sh
   ```
3. Run fuzzing:
   ```bash
   sudo python3 protofuzz.py -t 192.168.1.100 -p 80 -m http -c 10 -q
   ```
4. Check logs/results (text/JSON); verify server status.
5. Stop with `Ctrl+C`; secure outputs (`rm protofuzz_*.txt protofuzz_*.json`).

## Output
- **Logs**: `protofuzz.log`.
- **Results**: `protofuzz_results_<timestamp>.txt` and `.json`, e.g.:
  ```
  [2025-05-15 12:39:01] Packet 1: No response (possible crash)
  [2025-05-15 12:39:02] Fuzzing complete
  ```

## Notes
- **Environment**: Use on authorized servers (e.g., local server).
- **Root**: Requires `sudo` for Scapy.
- **Impact**: May cause DoS; test in isolated setups.
- **Ethics**: Avoid unauthorized use to prevent legal/service issues.

## Disclaimer
**Personal Use Only**: ProtoFuzz is for learning on servers you own or have permission to test. Unauthorized use is illegal and may cause disruptions or legal consequences. Ensure compliance with local laws.

**Safe Use**:
- Use in a private lab (e.g., VM with server).
- Secure outputs (`protofuzz.log`, `protofuzz_results_*.txt/json`); delete after use.
- No warranty; use at your own risk.

**Avoid**:
- Public/corporate servers without permission.
- Sharing sensitive output files.
- Production systems to prevent outages.

## Limitations
- Supports HTTP, SMTP, FTP; Sfuzz covers more protocols.
- Basic fuzzing; no advanced payload generation.
- Depends on server configuration and Scapy support.

## Tips
- Set up vsftpd or HTTP server in your lab.
- Verify target (`netcat -zv 192.168.1.100 80`).
- Monitor with Wireshark or server logs.
- Test mitigations (e.g., input validation).
- Isolate setup to avoid misuse.

## License
For personal educational use; no formal license. Use responsibly.