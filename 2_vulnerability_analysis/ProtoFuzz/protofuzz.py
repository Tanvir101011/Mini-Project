import argparse
import logging
import sys
import time
import json
from scapy.all import *
import random
import socket

# Configure logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(message)s',
    handlers=[
        logging.FileHandler('protofuzz.log'),
        logging.StreamHandler(sys.stdout)
    ]
)

class ProtoFuzz:
    def __init__(self, target: str, port: int, protocol: str, count: int, quiet: bool = False):
        self.target = target
        self.port = port
        self.protocol = protocol.lower()
        self.count = count
        self.quiet = quiet
        self.results = []
        self.output_file = f"protofuzz_results_{time.strftime('%Y%m%d_%H%M%S')}.txt"
        self.json_file = f"protofuzz_results_{time.strftime('%Y%m%d_%H%M%S')}.json"
        self.supported_protocols = ['http', 'smtp', 'ftp']
        conf.verb = 0

    def generate_payload(self) -> Optional[bytes]:
        """Generate a malformed payload for the protocol."""
        try:
            if self.protocol == 'http':
                return f"GET /{random.randbytes(100).hex()} HTTP/1.1\r\nHost: {self.target}\r\n\r\n".encode()
            elif self.protocol == 'smtp':
                return f"HELO {random.randbytes(50).hex()}\r\n".encode()
            elif self.protocol == 'ftp':
                return f"USER {random.randbytes(50).hex()}\r\n".encode()
            else:
                raise ValueError(f"Unsupported protocol: {self.protocol}")
        except Exception as e:
            logging.error(f"Error generating payload: {e}")
            return None

    def send_packet(self, payload: bytes) -> Optional[str]:
        """Send packet and capture response."""
        try:
            with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as sock:
                sock.settimeout(5)
                sock.connect((self.target, self.port))
                sock.send(payload)
                try:
                    response = sock.recv(1024).decode(errors='ignore')
                    return f"Response: {response[:100]}..."
                except socket.timeout:
                    return "No response (possible crash)"
                except ConnectionResetError:
                    return "Connection reset (possible crash)"
        except Exception as e:
            return f"Error: {str(e)}"

    def run(self):
        """Run fuzzing test."""
        if self.protocol not in self.supported_protocols:
            logging.error(f"Protocol {self.protocol} not supported. Choose from {self.supported_protocols}")
            return

        logging.info(f"Starting ProtoFuzz on {self.target}:{self.port}, protocol: {self.protocol}, count: {self.count}")
        fuzz_results = []
        for i in range(self.count):
            payload = self.generate_payload()
            if not payload:
                continue
            result = self.send_packet(payload)
            if result:
                self.results.append(result)
                fuzz_results.append({"packet": i+1, "payload": payload.decode(errors='ignore')[:100], "response": result})
                logging.info(f"Packet {i+1}: {result}")
            time.sleep(0.1)  # Avoid overwhelming the target

        # Save text results
        with open(self.output_file, 'a') as f:
            for result in self.results:
                f.write(f"[{time.strftime('%Y-%m-%d %H:%M:%S')}] {result}\n")
            f.write(f"[{time.strftime('%Y-%m-%d %H:%M:%S')}] Fuzzing complete\n")

        # Save JSON results
        with open(self.json_file, 'w') as f:
            json.dump({"target": self.target, "port": self.port, "protocol": self.protocol,
                       "results": fuzz_results, "timestamp": time.strftime('%Y-%m-%d %H:%M:%S')}, f, indent=4)

        logging.info(f"Fuzzing complete. Results saved to {self.output_file} and {self.json_file}")

def main():
    parser = argparse.ArgumentParser(description="ProtoFuzz - Fuzz network protocols for vulnerabilities.")
    parser.add_argument('-t', '--target', required=True, help='Target IP (e.g., 192.168.1.100)')
    parser.add_argument('-p', '--port', type=int, required=True, help='Target port (e.g., 80)')
    parser.add_argument('-m', '--protocol', required=True, choices=['http', 'smtp', 'ftp'],
                        help='Protocol to fuzz')
    parser.add_argument('-c', '--count', type=int, default=10, help='Number of packets to send (default: 10)')
    parser.add_argument('-q', '--quiet', action='store_true', help='Quiet mode (log to file only)')

    args = parser.parse_args()

    if args.quiet:
        logging.getLogger().handlers = [logging.FileHandler('protofuzz.log')]

    fuzzer = ProtoFuzz(
        target=args.target,
        port=args.port,
        protocol=args.protocol,
        count=args.count,
        quiet=args.quiet
    )
    try:
        fuzzer.run()
    except KeyboardInterrupt:
        logging.info("Fuzzing interrupted by user")
        sys.exit(0)

if __name__ == "__main__":
    main()