import argparse
import logging
import os
import subprocess
import sys
import time
from typing import List

# Configure logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(message)s',
    handlers=[
        logging.FileHandler('secaudit.log'),
        logging.StreamHandler(sys.stdout)
    ]
)

class SecAudit:
    def __init__(self, output: str, quiet: bool = False):
        self.output = output
        self.quiet = quiet
        self.results = []
        self.output_file = f"secaudit_report_{time.strftime('%Y%m%d_%H%M%S')}.txt"
        self.checks = [
            self.check_passwd_permissions,
            self.check_ssh_config,
            self.check_open_ports
        ]

    def check_passwd_permissions(self) -> str:
        """Check /etc/passwd permissions."""
        try:
            stat = os.stat('/etc/passwd')
            perms = oct(stat.st_mode)[-3:]
            owner = stat.st_uid
            if perms != '644' or owner != 0:
                return "Warning: /etc/passwd has incorrect permissions or owner (expected: 644, root)"
            return "OK: /etc/passwd permissions and owner correct"
        except Exception as e:
            return f"Error checking /etc/passwd: {e}"

    def check_ssh_config(self) -> str:
        """Check SSH configuration for root login."""
        try:
            with open('/etc/ssh/sshd_config', 'r') as f:
                config = f.read()
            if 'PermitRootLogin yes' in config:
                return "Warning: SSH allows root login (PermitRootLogin yes)"
            return "OK: SSH root login disabled or not explicitly enabled"
        except Exception as e:
            return f"Error checking SSH config: {e}"

    def check_open_ports(self) -> str:
        """Check open ports using netstat."""
        try:
            result = subprocess.run(['netstat', '-tuln'], capture_output=True, text=True, timeout=5)
            ports = [line for line in result.stdout.splitlines() if 'LISTEN' in line]
            if not ports:
                return "OK: No open ports detected"
            return f"Info: Open ports detected:\n{''.join([f'  {p}\n' for p in ports])}"
        except Exception as e:
            return f"Error checking open ports: {e}"

    def run(self):
        """Run security audit."""
        logging.info("Starting SecAudit")
        for check in self.checks:
            result = check()
            self.results.append(result)
            logging.info(result)
            with open(self.output_file, 'a') as f:
                f.write(f"[{time.strftime('%Y-%m-%d %H:%M:%S')}] {result}\n")
        
        logging.info(f"Audit complete. Results saved to {self.output_file}")
        with open(self.output, 'w') as f:
            f.write("\n".join(self.results) + "\n")
        with open(self.output_file, 'a') as f:
            f.write(f"[{time.strftime('%Y-%m-%d %H:%M:%S')}] Audit complete\n")

def main():
    parser = argparse.ArgumentParser(description="SecAudit - Audit system security configurations.")
    parser.add_argument('-o', '--output', default='secaudit_report.txt', help='Output report file')
    parser.add_argument('-q', '--quiet', action='store_true', help='Quiet mode (log to file only)')

    args = parser.parse_args()

    if args.quiet:
        logging.getLogger().handlers = [logging.FileHandler('secaudit.log')]

    if os.geteuid() != 0:
        logging.error("Root privileges required. Run with sudo.")
        sys.exit(1)

    audit = SecAudit(output=args.output, quiet=args.quiet)
    try:
        audit.run()
    except KeyboardInterrupt:
        logging.info("Audit interrupted by user")
        sys.exit(0)

if __name__ == "__main__":
    main()