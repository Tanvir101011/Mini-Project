# Layer2Freak

## Description
Layer2Freak is a Python tool you can use to simulate Layer 2 attacks in your own private network to learn about how network protocols (e.g., DHCP, STP) behave under attack. It helps you study network security, protocol vulnerabilities, and mitigation techniques by performing attacks like DHCP starvation and Spanning Tree Protocol (STP) manipulation, similar to the **Yersinia** tool’s functionality. Inspired by **Yersinia**, Layer2Freak is designed for your personal experimentation in a controlled environment, like a home lab with network interfaces and devices you own or have explicit permission to test.

**Important**: This tool is for your personal use only with networks and devices you own or have explicit permission to test. Performing Layer 2 attacks without clear authorization is illegal and could cause serious issues, such as network disruptions or legal consequences. The tool avoids external network interactions beyond your lab to prevent misuse, ensuring it remains a safe learning tool.

## Features
- Performs DHCP starvation by sending spoofed DHCP Discover packets to exhaust IP pools.
- Manipulates STP by sending Configuration BPDUs to attempt root bridge takeover.
- Spoofs source MAC addresses to mask the attacker’s identity.
- Supports targeting specific interfaces and protocols (DHCP, STP).
- Logs attack details and packet summaries to a file for analysis.
- Quiet mode to reduce terminal output.
- Configurable interface, attack type, target IP, and packet rate.
- Simple design for educational use in personal projects.

## Installation
1. **What You Need**:
   - Linux OS (e.g., Ubuntu 24.04, check with `uname -a`).
   - Python 3.12 or later (check with `python3 --version`).
   - A network interface (e.g., `eth0`, check with `ip link`).
   - Root/admin privileges (e.g., `sudo` on Linux).
   - A computer on a private network you control (e.g., your home lab).
2. Install dependencies:
   - Save the `setup_layer2freak.sh` script to a folder (e.g., `/home/user/layer2freak/`).
   - Make it executable and run it:
     ```bash
     chmod +x setup_layer2freak.sh
     ./setup_layer2freak.sh
     ```
   - This installs `scapy` and `netifaces`.
3. Save the `layer2freak.py` file to the same folder.
4. Run the script:
   ```bash
   sudo python3 layer2freak.py --help
   ```

## How to Use
Layer2Freak simulates Layer 2 attacks by sending crafted packets to exploit protocol weaknesses, such as flooding DHCP servers with fake requests or manipulating STP to influence network topology. It spoofs MAC addresses and targets specific IPs, allowing you to study network behavior. Below is a guide on how to use each feature with examples and expected results.

### Basic Usage
Start a DHCP starvation attack:
```bash
sudo python3 layer2freak.py -i eth0 -a dhcp
```

Perform an STP root bridge attack:
```bash
sudo python3 layer2freak.py -i eth0 -a stp -t 192.168.1.1
```

### Options
- `-i, --interface`: Network interface (e.g., `eth0`, required).
- `-a, --attack-type`: Attack type (`dhcp` or `stp`, required).
- `-t, --target-ip`: Target IP address (default: `192.168.1.1`).
- `-r, --rate`: Packet send rate (packets/second, default: 1).
- `-q, --quiet`: Run quietly (logs to file only).

### Using Each Feature

#### 1. DHCP Starvation Attack
**What It Does**: Floods the DHCP server with spoofed DHCP Discover packets to exhaust the IP pool, preventing legitimate clients from obtaining IPs.
**How to Use**:
1. Find your network interface (e.g., `ip link`).
2. Identify the DHCP server IP (e.g., `192.168.1.1`).
3. Run:
   ```bash
   sudo python3 layer2freak.py -i eth0 -a dhcp -t 192.168.1.1 -r 5
   ```
4. Monitor traffic with Wireshark or test a new client’s ability to get an IP.
**What Happens**:
- Layer2Freak sends DHCP Discover packets with random MACs:
  ```
  2025-05-15 10:30:00 - Starting Layer2Freak: Attack=dhcp, Target=192.168.1.1, Rate=5/s
  2025-05-15 10:30:01 - Sent packet #1: Ether / IP / UDP / BOOTP / DHCP
  2025-05-15 10:30:01 - Sent packet #2: Ether / IP / UDP / BOOTP / DHCP
  ```
- Results file example (`layer2freak_results_20250515_103000.txt`):
  ```
  [2025-05-15 10:30:01] Ether / IP / UDP / BOOTP / DHCP
  [2025-05-15 10:30:01] Ether / IP / UDP / BOOTP / DHCP
  ```
**Tips**:
- Use a VM or device in your lab as the target.
- Run Wireshark (`sudo wireshark -i eth0`) to observe DHCP requests.
- Test a new client (e.g., `dhclient eth0`) to confirm IP exhaustion.

#### 2. STP Root Bridge Attack
**What It Does**: Sends Configuration BPDUs with a low bridge priority to attempt to become the STP root bridge, potentially disrupting network topology.
**How to Use**:
1. Identify a switch IP (e.g., `192.168.1.1`).
2. Run:
   ```bash
   sudo python3 layer2freak.py -i eth0 -a stp -t 192.168.1.1 -r 2
   ```
3. Monitor switch logs or use Wireshark to observe BPDU changes.
**What Happens**:
- Layer2Freak sends STP BPDUs claiming root status:
  ```
  2025-05-15 10:35:00 - Starting Layer2Freak: Attack=stp, Target=192.168.1.1, Rate=2/s
  2025-05-15 10:35:01 - Sent packet #1: Ether / LLC / STP
  2025-05-15 10:35:01 - Sent packet #2: Ether / LLC / STP
  ```
- Switch logs may show a new root bridge (if unprotected).
**Tips**:
- Test on a managed switch in your lab (e.g., Cisco with STP enabled).
- Use `tcpdump -i eth0 ether proto 0x8809` to capture BPDUs.
- Enable BPDU Guard or Root Guard on switches to test mitigation.

#### 3. Spoofing MAC Addresses
**What It Does**: Uses random MAC addresses for each packet to mask the attacker’s identity.
**How to Use**:
1. Run any attack (e.g., DHCP):
   ```bash
   sudo python3 layer2freak.py -i eth0 -a dhcp
   ```
**What Happens**:
- Packets use random MACs:
  ```
  2025-05-15 10:40:00 - Sent packet #1: Ether (src=3a:5b:7c:9d:1e:2f) / IP / UDP / BOOTP / DHCP
  2025-05-15 10:40:01 - Sent packet #2: Ether (src=4c:6d:8e:0f:2a:3b) / IP / UDP / BOOTP / DHCP
  ```
**Tips**:
- Verify MAC spoofing in Wireshark.
- Ensure your lab switch allows spoofed MACs (disable port security for testing).

#### 4. Quiet Mode
**What It Does**: Reduces terminal output, logging only to the file.
**How to Use**:
1. Enable quiet mode:
   ```bash
   sudo python3 layer2freak.py -i eth0 -a dhcp -q
   ```
**What Happens**:
- No terminal output; logs go to `layer2freak.log`:
  ```
  $ sudo python3 layer2freak.py -i eth0 -a dhcp -q
  [No output]
  ```
- Log file example:
  ```
  2025-05-15 10:45:00 - Starting Layer2Freak: Attack=dhcp, Target=192.168.1.1, Rate=1/s
  2025-05-15 10:45:01 - Sent packet #1: Ether / IP / UDP / BOOTP / DHCP
  ```
**Tips**:
- Check logs with `cat layer2freak.log` or `tail -f layer2freak.log`.
- Useful for background testing.

#### 5. Stopping the Tool
**What It Does**: Stops packet sending and saves logs when done or interrupted.
**How to Use**:
1. Start the attack:
   ```bash
   sudo python3 layer2freak.py -i eth0 -a stp
   ```
2. Press `Ctrl+C` to stop.
**What Happens**:
- The tool stops, saves logs, and cleans up:
  ```
  2025-05-15 10:50:00 - Starting Layer2Freak: Attack=stp, Target=192.168.1.1, Rate=1/s
  ^C
  2025-05-15 10:50:01 - Layer2Freak stopped. Total packets sent: 2
  2025-05-15 10:50:01 - Results saved to layer2freak_results_20250515_105001.txt
  ```
**Tips**:
- Always stop the tool to free resources.
- Results are saved even if stopped early.

### Example Workflow
To experiment with Layer 2 attacks in your home lab:
1. Set up a test network (e.g., a VM with `eth0`, a DHCP server, and a switch at `192.168.1.1`).
2. Install dependencies:
   ```bash
   ./setup_layer2freak.sh
   ```
3. Start a DHCP starvation attack:
   ```bash
   sudo python3 layer2freak.py -i eth0 -a dhcp -t 192.168.1.1 -r 5 -q
   ```
4. Monitor traffic with Wireshark or test a new client’s IP assignment.
5. Review `layer2freak.log` and `layer2freak_results_*.txt` for packet details.
6. Stop with `Ctrl+C` and delete output files securely.

## Output
- Logs are saved to `layer2freak.log`.
- Packet details are saved to `layer2freak_results_<timestamp>.txt`.
- Example results file:
  ```
  [2025-05-15 10:30:01] Ether / IP / UDP / BOOTP / DHCP
  [2025-05-15 10:30:02] Ether / IP / UDP / BOOTP / DHCP
  [2025-05-15 10:30:03] Total packets sent: 2
  ```

## Important Notes
- **Environment**: Use Layer2Freak only on networks and devices you own or have explicit permission to test (e.g., a local VM or home switch).
- **Root Privileges**: Requires `sudo` for packet injection via Scapy.
- **No External Interaction**: The tool avoids external network interactions to prevent misuse, as recommended for Layer 2 attack tools.
- **Network Impact**: Attacks like DHCP starvation or STP manipulation can cause Denial of Service (DoS). Test in isolated environments to avoid disrupting legitimate users.
- **Ethical Use**: Do not use on unauthorized networks, as Layer 2 attacks can disrupt services or trigger security alerts, which is illegal without permission.[](https://kalilinuxtutorials.com/yersinia/)

## Disclaimer
**Personal Use Only**: Layer2Freak is for your personal learning with networks and devices you own or have explicit permission to test. Performing Layer 2 attacks without clear authorization is illegal and could lead to legal consequences, network disruptions, or unintended harm. Always ensure you have permission from the network owner before using this tool.

**Safe Use**:
- **Controlled Setup**: Use in a private lab (e.g., home network with your devices) to avoid affecting others. For example, test on `eth0` in a local VM.
- **Data Security**: Output files (`layer2freak.log`, `layer2freak_results_*.txt`) may contain network data. Store them securely and delete them after use (e.g., `rm layer2freak_*.txt`).
- **Legal Compliance**: Follow all applicable laws and regulations in your area, including privacy and network security laws.
- **No Warranty**: This tool is provided “as is” for educational purposes. You are responsible for its use and any consequences.

**What to Avoid**:
- Do not use on public networks (e.g., corporate or public Wi-Fi) without permission.
- Do not share output files, as they may contain sensitive data.
- Do not target devices without explicit authorization, as it’s illegal and disruptive.
- Avoid targeting production networks, as DoS attacks can cause outages.

## Limitations
- Requires a compatible network interface and root privileges.
- Supports only DHCP starvation and STP attacks; **Yersinia** includes additional protocols (e.g., CDP, HSRP).[](https://www.kali.org/tools/yersinia/)
- Basic attack implementation; advanced tools like **Yersinia** offer GUI modes and more protocols.
- Effectiveness depends on network configuration (e.g., BPDU Guard or DHCP Snooping may block attacks).
- No real-time traffic analysis or protocol discovery, unlike tools like Ettercap.

## Testing Tips
- Verify interface: Use `ip link` to check `eth0` is active.
- Test target: Ping the target IP (`ping 192.168.1.1`) to ensure reachability.
- Monitor traffic: Use `wireshark -i eth0` or `tcpdump -i eth0` to observe packets.
- Secure outputs: Delete files after use (`rm layer2freak_*.txt`).
- Check logs in real-time: `tail -f layer2freak.log`.
- Test without internet: Ensure the setup is isolated to avoid misuse.
- Mitigate attacks: Test with DHCP Snooping or BPDU Guard enabled to learn defenses.

## License
This tool is for your personal use. No formal license is provided, but please use it responsibly.